<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            The Bresenham algorithm collection
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The type being swapped.</typeparam>
            <param name="lhs">Left value.</param>
            <param name="rhs">Right value.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using steep.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function, taking x and y. (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line2(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using an interpolation derived algorithm.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            Uses a 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.ColorGradient,System.Action{System.Int32,System.Int32,Microsoft.Xna.Framework.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="cellSize">The size of an individual cell. Makes the angle uniform.</param>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="gradient">The color gradient to fill with.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Circle(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of the circle, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="centerX">The X coordinate of the center of the circle.</param>
            <param name="centerY">The Y coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the circle.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of an ellipse, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="x0">The X coordinate of the first corner of the ellipse.</param>
            <param name="y0">The Y coordinate of the first corner of the ellipse.</param>
            <param name="x1">The X coordinate of the second corner of the ellipse.</param>
            <param name="y1">The Y coordinate of the second corner of the ellipse.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the ellipse.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Creates a new instance of this object with the specified connections.
            </summary>
            <param name="west">The west connection.</param>
            <param name="east">The east connection.</param>
            <param name="north">The north connection.</param>
            <param name="south">The south connection.</param>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor">
            <summary>
            Creates a new instance of this object with all connections set to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SadConsole.AnimatedConsole">
            <summary>
            Animates a list of frames.
            </summary>
        </member>
        <member name="E:SadConsole.AnimatedConsole.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.AnimatedConsole.AnimationState"/> changes.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.FramesList">
            <summary>
            The frames of animation.
            </summary>
            <remarks>If this collection changes, <see cref="F:SadConsole.AnimatedConsole.CurrentFrameIndexValue"/>, <see cref="M:SadConsole.AnimatedConsole.UpdateFrameReferences"/>, and <see cref="F:SadConsole.AnimatedConsole.TimePerFrame"/> should all be recalculated.</remarks>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AddedTime">
            <summary>
            Time counter for the animation
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.CurrentFrameIndexValue">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.TimePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.Frames">
            <summary>
            All frames of the animation
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.IsPlaying">
            <summary>
            When true, Indicates the animation is currently animating. The <see cref="M:SadConsole.AnimatedConsole.Update(System.TimeSpan)"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.CurrentFrame">
            <summary>
            Gets the currently frame being animated.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedConsole.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
        </member>
        <member name="M:SadConsole.AnimatedConsole.#ctor(System.String,System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
        </member>
        <member name="M:SadConsole.AnimatedConsole.SetRenderCells">
            <summary>
            Forces the area of this text surface to always be the full width and height.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.UpdateFrameReferences">
            <summary>
            Updates the base <see cref="P:SadConsole.CellSurface.Cells"/> references to the current frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.AnimatedConsole.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Update(System.TimeSpan)">
            <summary>
            Updates the animation frames and calls update on the base class.
            </summary>
            <param name="timeElapsed">The time elapsed since the last call in seconds.</param>
        </member>
        <member name="M:SadConsole.AnimatedConsole.ToString">
            <summary>
            Returns the name of the animation.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.AnimatedConsole.OnCalculateRenderPosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.AnimatedConsole.CreateStatic(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates an animated surface that looks like static.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="frames">How many frames the animation should have.</param>
            <param name="blankChance">Chance a character will be blank. Characters are between index 48-158. Chance is evaluated versus <see cref="M:System.Random.NextDouble"/>.</param>
            <returns>An animation.</returns>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.AnimatedConsole"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.AnimatedConsole.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.AnimatedConsole"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.AnimatedConsole.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedConsole.AnimationStateChangedEventArgs.#ctor(SadConsole.AnimatedConsole.AnimationState,SadConsole.AnimatedConsole.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.AnimatedConsole.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedConsole.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.AnsiWriter">
            <summary>
            Writes a <see cref="T:SadConsole.Ansi.Document"/> to a <see cref="T:SadConsole.CellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.AnsiDocument">
            <summary>
            The document used to create this writer.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.BlinkEffect">
            <summary>
            The blink effect to apply when the ansi document provides the ANSI blink command.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.Cursor">
            <summary>
            The cursor used to write to the target <see cref="T:SadConsole.CellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond">
            <summary>
            How many characters to process a second. When set to 0 reads the entire document at once.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.#ctor(SadConsole.Ansi.Document,SadConsole.CellSurface)">
            <summary>
            Creates a new instance with the source document and target surface.
            </summary>
            <param name="ansiDocument">The source document containing ANSI commands.</param>
            <param name="editor">The surface to parse the ANSI to.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Process(System.Double)">
            <summary>
            Processes the document by the amount of time that has elapsed. If <see cref="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond"/> is 0, time elapsed has no affect.
            </summary>
            <param name="timeElapsed">The time in seconds.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiInterpret(System.String)">
            <summary>
            Interprets an individual ansi code.
            </summary>
            <param name="code">The ANSI.SYS code to read.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiReadLine(System.String,System.Boolean)">
            <summary>
            Reads a line of ANSI.SYS code.
            </summary>
            <param name="line">The line to read.</param>
            <param name="moreLines">When <see langword="true"/>, calls <see cref="M:SadConsole.Cursor.LineFeed"/>; otherwise does nothing.</param>
            <returns>Returns false when character 26 is encountered; otherwise true.</returns>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.ReadEntireDocument">
            <summary>
            Loads an ansi file and parses it.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Restart">
            <summary>
            Moves the reader back to the start of the file so that the source can .
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Document">
            <summary>
            Represents an ANSI.SYS formatted document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiBytes">
            <summary>
            Gets or sets the ANSI.SYS bytes that make up the document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiString">
            <summary>
            A string representing the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.Stream">
            <summary>
            A stream that points to the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Document.#ctor(System.String)">
            <summary>
            Creates a new document from the provided file name.
            </summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:SadConsole.Ansi.Document.Finalize">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Ansi.Document.FromAsciiString(System.String)">
            <summary>
            Creates a new document from an existing string representing ANSI.SYS codes and characters.
            </summary>
            <param name="ansiContent">The ANSI.SYS encoded string.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.FromBytes(System.Byte[])">
            <summary>
            Creates a new document from an existing byte array representing ANSI.SYS codes and characters.
            </summary>
            <param name="bytes">The ANSI.SYS encoded byte array.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.System#IDisposable#Dispose">
            <summary>
            Disposes the <see cref="P:SadConsole.Ansi.Document.Stream"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Helpers">
            <summary>
            Helpers related to ANSI processing.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiJustNormalColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns the a normal, dark, ansi color based on the ansi color provided.
            </summary>
            <param name="input">An ansi color.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiAdjustColor(Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>
            Adjusts the provided color based on the <paramref name="bold"/> value.
            </summary>
            <param name="input">The ansi color to adjust.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiConfigurePrintColor(System.Boolean,System.Int32,SadConsole.Ansi.State)">
            <summary>
            Sets the print appearance of the cursor based on the ANSI.SYS code provided.
            </summary>
            <param name="isBackground">When true, changes the background color instead of the foreground.</param>
            <param name="code">The 0-7 color code.</param>
            <param name="ansiState">The current state of the ANSI settings.</param>
        </member>
        <member name="T:SadConsole.Ansi.State">
            <summary>
            Represents the state of an ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Bold">
            <summary>
            Indicates that the state is using bold colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Reverse">
            <summary>
            Indicates that the state is printing reverse colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Concealed">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Foreground">
            <summary>
            Foreground color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Background">
            <summary>
            Background color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.#ctor">
            <summary>
            Creates a new object to track the state of the ansi cursor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiCorrectPrintColor">
            <summary>
            Forces the Background of the print appearance to be the darkened color and the foreground to be bright or not based on the <see cref="P:SadConsole.Ansi.State.Bold"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiResetVideo">
            <summary>
            Resets all of the print appearance and ansi settings back to the default.
            </summary>
        </member>
        <member name="T:SadConsole.Cell">
            <summary>
            Represents an individual glyph on the screen with a foreground, background, and mirror effect.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.Decorators">
            <summary>
            Modifies the look of a cell with additional character. 
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Foreground">
            <summary>
            The foreground color of this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Background">
            <summary>
            The background color of this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Glyph">
            <summary>
            The glyph index from a font for this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.Mirror">
            <summary>
            The mirror effect for this cell.
            </summary>
        </member>
        <member name="F:SadConsole.Cell.IsVisible">
            <summary>
            When true, indicates this cell should be drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Cell.State">
            <summary>
            A temporary state to backup and restore a cell.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.#ctor">
            <summary>
            Creates a cell with a white foreground, black background, glyph 0, and no mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a cell with the specified foreground, black background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a cell with the specified foreground, specified background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates a cell with the specified foreground, background, and glyph, with no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
        </member>
        <member name="M:SadConsole.Cell.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
        </member>
        <member name="M:SadConsole.Cell.CopyAppearanceTo(SadConsole.Cell)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, and mirror effect.
            </summary>
            <param name="cell">The target cell to copy to.</param>
        </member>
        <member name="M:SadConsole.Cell.CopyAppearanceFrom(SadConsole.Cell)">
            <summary>
            Sets the foreground, background, glyph, and mirror effect to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
        </member>
        <member name="M:SadConsole.Cell.Clear">
            <summary>
            Resets the foreground, background, glyph, and mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Draws a single cell using the specified SpriteBatch.
            </summary>
            <param name="batch">Rendering batch.</param>
            <param name="position">Pixel position on the screen to render.</param>
            <param name="size">Rendering size of the cell.</param>
            <param name="font">Font used to draw the cell.</param>
        </member>
        <member name="M:SadConsole.Cell.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,SadConsole.Font)">
            <summary>
            Draws a single cell using the specified SpriteBatch.
            </summary>
            <param name="batch">Rendering batch.</param>
            <param name="drawingRectangle">Where on the sreen to draw the cell, in pixels.</param>
            <param name="font">Font used to draw the cell.</param>
        </member>
        <member name="M:SadConsole.Cell.SaveState">
            <summary>
            Saves the current state of this cell to the <see cref="P:SadConsole.Cell.State"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.SaveState(SadConsole.CellState@)">
            <summary>
            Saves the current state of this cell to the provided state variable.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.RestoreState">
            <summary>
            Restores the state of this cell from the <see cref="P:SadConsole.Cell.State"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.RestoreState(SadConsole.CellState@)">
            <summary>
            Restores the state of this cell from the <paramref name="state"/> parameter.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.ClearState">
            <summary>
            Resets the <see cref="P:SadConsole.Cell.State"/> to nothing.
            </summary>
        </member>
        <member name="M:SadConsole.Cell.Clone">
            <summary>
            Returns a new cell with the same properties as this one.
            </summary>
            <returns>The new cell.</returns>
        </member>
        <member name="M:SadConsole.Cell.op_Equality(SadConsole.Cell,SadConsole.CellState)">
            <summary>
            Compares if the cell is the same as the state.
            </summary>
            <param name="left">A cell.</param>
            <param name="right">A cell state.</param>
            <returns>True when they match.</returns>
        </member>
        <member name="M:SadConsole.Cell.op_Inequality(SadConsole.Cell,SadConsole.CellState)">
            <summary>
            Compares if the cell is different from the state.
            </summary>
            <param name="left">A cell.</param>
            <param name="right">A cell state.</param>
            <returns>True when are different.</returns>
        </member>
        <member name="T:SadConsole.CellDecorator">
            <summary>
            Decorates a cell with a colored glyph.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Empty">
            <summary>
            An empty cell decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Color">
            <summary>
            Foreground color of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Glyph">
            <summary>
            Glyph of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Mirror">
            <summary>
            Mirror setting of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.CellDecorator.#ctor(Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new decorator with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="color">Foreground color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(SadConsole.CellDecorator)">
            <summary>
            Determines if this object has the same value as the other.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the objects have the same values.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Equality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Inequality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects do not match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> do not match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellDecorator.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.CellState">
            <summary>
            A cell in structure format for temporary storage.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Decorators">
            <summary>
            Decorators of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Foreground">
            <summary>
            Foreground color of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Background">
            <summary>
            Background color of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Glyph">
            <summary>
            Glyph of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.Mirror">
            <summary>
            Mirror setting of the state.
            </summary>
        </member>
        <member name="F:SadConsole.CellState.IsVisible">
            <summary>
            Visible setting of the state.
            </summary>
        </member>
        <member name="M:SadConsole.CellState.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,SadConsole.CellDecorator[])">
            <summary>
            Creates a new state with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
            <param name="isVisible">Visbility setting.</param>
            <param name="decorators">Decorators setting.</param>
        </member>
        <member name="M:SadConsole.CellState.#ctor(SadConsole.Cell)">
            <summary>
            Creates a cell state from a cell.
            </summary>
            <param name="source">The source cell to create a state from.</param>
        </member>
        <member name="T:SadConsole.CellSurface">
            <summary>
            An array of <see cref="T:SadConsole.Cell"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.CellSurface.DirtyChanged">
            <summary>
            An event that is raised when <see cref="P:SadConsole.CellSurface.IsDirty"/> is set to true.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Width">
            <summary>
            How many cells wide the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Height">
            <summary>
            How many cells high the surface is.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Cells">
            <summary>
            All cells of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on its coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/> for the background and <see cref="P:Microsoft.Xna.Framework.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,SadConsole.Cell[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:Microsoft.Xna.Framework.Color.Transparent"/> for the background and <see cref="P:Microsoft.Xna.Framework.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.OnDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnCellsReset">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.Cells"/> property is reset.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedDown">
            <summary>
            A variable that tracks how many times this editor shifted the surface down.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedRight">
            <summary>
            A variable that tracks how many times this editor shifted the surface right.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedLeft">
            <summary>
            A variable that tracks how many times this editor shifted the surface left.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedUp">
            <summary>
            A variable that tracks how many times this editor shifted the surface up.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.UsePrintProcessor">
            <summary>
            When true, the <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> command is used to print strings.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Effects">
            <summary>
            Processes the effects added to cells with <see cref="o:SetEffect"/>
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.SetPixels(Microsoft.Xna.Framework.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. Must be the same length as this cell surface.
            </summary>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetPixels(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color[])">
            <summary>
            Sets each background of a cell to the array of colors.
            </summary>
            <param name="area">An area to fill with pixels.</param>
            <param name="pixels"></param>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph and foreground of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Changes the glyph, foreground, background, and effect of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Collections.Generic.IEnumerable{SadConsole.CellDecorator})">
            <summary>
            Changes the glyph, foreground, background, and effect of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
            <param name="decorators">Decorators to set on the cell. Will clear existing decorators first.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetGlyph(System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetForeground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetForeground(System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetBackground(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetBackground(System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="cell">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetEffect(System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetCellAppearance(System.Int32,System.Int32,SadConsole.Cell)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetCellAppearance(System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetCells(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets an enumerable of cells over a specific area.
            </summary>
            <param name="area">The area to get cells from.</param>
            <returns>A new array with references to each cell in the area.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetMirror(System.Int32,System.Int32)">
            <summary>
            Gets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetMirror(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Sets the sprite effect of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="mirror">The mirror of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetDecorator(System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetDecorator(System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.AddDecorator(System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.AddDecorator(System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. If <code>null</code>, does nothing.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ClearDecorators(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells.
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurface.ClearDecorators(System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells.
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,SadConsole.ColoredGlyph)">
            <summary>
            Draws a single glyph on the console at the specified location.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="glyph">The glyph to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetString(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetStringColored(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetStringColored(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.ClearShiftValues">
            <summary>
            Resets the shifted amounts to 0, as if the surface has never shifted.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftUp">
            <summary>
            Scrolls all the console data up by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftUp(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the bottom. When true, the top line appears at the bottom.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftDown">
            <summary>
            Scrolls all the console data down by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftDown(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the top. When true, the bottom line appears at the top.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftRight">
            <summary>
            Scrolls all the console data right by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftRight(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the left. When true, the right line appears at the left.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftLeft">
            <summary>
            Scrolls all the console data left by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the right. When true, the left line appears at the right.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Clear">
            <summary>
            Clears the console data. Characters are reset to 0, the foreground and background are set to default, and effect set to none. Clears cell decorators.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the foreground and background is set to default, and effect is set to none. Clears cell decorators.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears a segment of cells, starting from the left, extending to the right, and wrapping if needed. Character is reset to 0, the foreground and background is set to default, and effect is set to none. Clears cell decorators.
            </summary>
            <param name="x">The x position of the left end of the segment.</param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <remarks>This works similarly to printing a string of whitespace</remarks>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Clears an area of cells. Character is reset to 0, the foreground and background is set to default, and effect is set to none. Clears cell decorators.
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the console. Clears cell decorators.
            </summary>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Foreground to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Sprite effect to apply. If null, skips.</param>
            <returns>The array of all cells in this console, starting from the top left corner.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(System.Int32,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills a segment of cells, starting from the left, extending to the right, and wrapping if needed. Clears cell decorators.
            </summary>
            <param name="x">The x position of the left end of the segment. </param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Sprite effect to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If x or y are out of bounds, nothing happens and an empty array is returned</returns>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Fills the specified area. Clears cell decorators.
            </summary>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Sprite effect to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If the area is out of bounds, nothing happens and an empty array is returned.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.DrawLine(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32})">
            <summary>
            Draws a line from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">Starting point of the line.</param>
            <param name="end">Ending point of the line.</param>
            <param name="foreground">Foreground to set. If null, skipped.</param>
            <param name="background">Background to set. If null, skipped.</param>
            <param name="glyph">Glyph to set. If null, skipped.</param>
            <returns>A list of cells the line touched; ordered from first to last.</returns>
            <remarks>If no foreground, background, or glyph are specified, then the list of affected cells are returned but nothing is drawn.</remarks>
        </member>
        <member name="M:SadConsole.CellSurface.DrawBox(Microsoft.Xna.Framework.Rectangle,SadConsole.Cell,SadConsole.Cell,System.Int32[])">
            <summary>
            Draws a box.
            </summary>
            <param name="area">The area of the box.</param>
            <param name="border">The border style.</param>
            <param name="fill">The fill style. If null, the box is not filled.</param>
            <param name="connectedLineStyle">The lien style of the border. If null, <paramref name="border"/> glyph is used.</param>
        </member>
        <member name="M:SadConsole.CellSurface.DrawCircle(Microsoft.Xna.Framework.Rectangle,SadConsole.Cell,SadConsole.Cell)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="area">The area the ellipse </param>
            <param name="outer">The appearance of the outer line of the ellipse.</param>
            <param name="inner">The appearance of the inside of hte ellipse. If null, it will not be filled.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ConnectLines">
            <summary>
            Connects all lines in a surface for both <see cref="F:SadConsole.CellSurface.ConnectedLineThin"/> and <see cref="F:SadConsole.CellSurface.ConnectedLineThick"/> styles.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ConnectLines(System.Int32[])">
            <summary>
            Connects all lines in this based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.CellSurface.ConnectedLineIndex"/>.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(SadConsole.CellSurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(SadConsole.CellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.CellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified width and height, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The width to copy from.</param>
            <param name="height">The height to copy from.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
            <param name="clear">When true, resets every cell to the <see cref="P:SadConsole.CellSurface.DefaultForeground"/>, <see cref="P:SadConsole.CellSurface.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetSubSurface(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Returns a new surface instance from the current instance based on the <paramref name="view"/>.
            </summary>
            <param name="view">An area of the surface to create a view of.</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface``1(``0@,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Remaps the cells of this surface to a view of the <paramref name="surface"/>.
            </summary>
            <typeparam name="T">The surface type.</typeparam>
            <param name="view">A view rectangle of the target surface.</param>
            <param name="surface">The target surface to map cells from.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.Cell[]@,System.Int32,System.Int32)">
            <summary>
            Changes the cells of the surface to the provided array.
            </summary>
            <param name="cells">The cells to replace in this surface.</param>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.FillWithRandomGarbage(System.Boolean)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetIndexFromPoint(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets the index of a location on the surface by point.
            </summary>
            <param name="location">The location of the index to get.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetIndexFromPoint(System.Int32,System.Int32)">
            <summary>
            Gets the index of a location on the surface by coordinate.
            </summary>
            <param name="x">The x of the location.</param>
            <param name="y">The y of the location.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetPointFromIndex(System.Int32)">
            <summary>
            Gets the x,y of an index on the surface.
            </summary>
            <param name="index">The index to get.</param>
            <returns>The x,y as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThin">
            <summary>
            Glyph indexes for a thin line.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThick">
            <summary>
            Glyph indexes for a thick line.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThinExtended">
            <summary>
            Glyph indexes for a thin line using a SadConsole extended font.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineEmpty">
            <summary>
            Glyph indexes for an empty line 0. 
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ValidateLineStyle(System.Int32[]@)">
            <summary>
            Returns a value that indicates a line style array is not null and contains the required number of elements.
            </summary>
            <param name="connectedLineStyle">The array to check based on the <see cref="T:SadConsole.CellSurface.ConnectedLineIndex"/> enum.</param>
            <returns>True when the line style is correct.</returns>
        </member>
        <member name="T:SadConsole.CellSurface.ConnectedLineIndex">
            <summary>
            Array index enum for line glyphs.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents a single character that has a foreground and background color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.GlyphCharacter">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredGlyph.Effect">
            <summary>
            The effect for the glyph.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a new colored glyph with a white foreground, black background, and a glyph index of 0.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadConsole.Cell)">
            <summary>
            Creates a new colored glyph based on the provided cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(System.Int32)">
            <summary>
            Creates a new colored glyph with a white foreground and black background.
            </summary>
            <param name="glyph">The glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new colored glyph with a given foreground and background.
            </summary>
            <param name="glyph">The glyph.</param>
            <param name="background">The color of the foreground.</param>
            <param name="foreground">The color of the background.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <summary>
            Creates a new copy of this cell appearance.
            </summary>
            <returns>The cloned cell appearance.</returns>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.CustomProcessor">
            <summary>
            Custom processor called if any built in command is not triggerd. Signature is ("command", "sub command", existing glyphs, text surface, associated editor, command stacks).
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.ColoredString.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:SadConsole.ColoredGlyph"/> from the string.
            </summary>
            <param name="index">The index in the string of the <see cref="T:SadConsole.ColoredGlyph"/>.</param>
            <returns>The colored glyph representing the character in the string.</returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the characters represneting this string. When set, first processes the string through <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Count">
            <summary>
            The total number of <see cref="T:SadConsole.ColoredGlyph"/> characters in the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the foreground color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the background color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreMirror">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value. Calls <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> first to process the string.
            </summary>
            <param name="value">The backing string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="mirror">The mirror for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.Cell)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyph[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyph"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.Clone">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object by cloning this instance.
            </summary>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance from the index to the end.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredGlyph"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(Microsoft.Xna.Framework.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.ToString">
            <summary>
            Returns a string representing the glyphs in this object.
            </summary>
            <returns>A string composed of each glyph in this object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredGlyph"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredGlyph"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,System.String)">
            <summary>
            Combines a colored string and string. The last colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The colored string.</param>
            <param name="string2">The string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(System.String,SadConsole.ColoredString)">
            <summary>
            Combines a string and a colored string. The first colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The string.</param>
            <param name="string2">The colored string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="T:SadConsole.Components.EntityViewSyncComponent">
            <summary>
            Add to an <see cref="T:SadConsole.Entities.Entity"/> to sync the visibility and position offset with a parent <see cref="T:SadConsole.Console"/>. 
            </summary>
        </member>
        <member name="P:SadConsole.Components.EntityViewSyncComponent.HandleIsVisible">
            <summary>
            If set to true, controls the <see cref="P:SadConsole.Console.IsVisible"/> property of the attached object.
            </summary>
        </member>
        <member name="M:SadConsole.Components.EntityViewSyncComponent.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.EntityViewSyncComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.EntityViewSyncComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.IConsoleComponent">
            <summary>
            A component that can be added to a <see cref="T:SadConsole.Console"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IConsoleComponent.IsUpdate">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IConsoleComponent.Update(SadConsole.Console,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IConsoleComponent.IsDraw">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IConsoleComponent.IsMouse">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IConsoleComponent.IsKeyboard">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="console">The host console.</param>
            <param name="state">The mouse state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="console">The host console.</param>
            <param name="info">The keyboard state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.OnAdded(SadConsole.Console)">
            <summary>
            Called when the component is added to a host.
            </summary>
            <param name="console">The host that added the component.</param>
        </member>
        <member name="M:SadConsole.Components.IConsoleComponent.OnRemoved(SadConsole.Console)">
            <summary>
            Called when the component is removed from the host.
            </summary>
            <param name="console">The host that removed the component.</param>
        </member>
        <member name="T:SadConsole.Components.UpdateConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.Update(SadConsole.Console,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.UpdateConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.UpdateConsoleComponent.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.UpdateConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.UpdateConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.DrawConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.DrawConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.DrawConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.DrawConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.DrawConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.MouseConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MouseConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.KeyboardConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.KeyboardConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="info">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.InputConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> and <see cref="M:SadConsole.Components.IConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.InputConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="info">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.LogicConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IConsoleComponent.Update(SadConsole.Console,System.TimeSpan)"/> and <see cref="M:SadConsole.Components.IConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LogicConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.LogicConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.LogicConsoleComponent.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="console">The console calling the component.</param>
            <param name="delta">Time since the last call.</param>
        </member>
        <member name="M:SadConsole.Components.LogicConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.LogicConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.ConsoleComponent">
            <summary>
            A base class that implements all of <see cref="T:SadConsole.Components.IConsoleComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ConsoleComponent.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ConsoleComponent.IsUpdate">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ConsoleComponent.IsDraw">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ConsoleComponent.IsMouse">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ConsoleComponent.IsKeyboard">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.Draw(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.ProcessKeyboard(SadConsole.Console,SadConsole.Input.Keyboard,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.ProcessMouse(SadConsole.Console,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.OnRemoved(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ConsoleComponent.OnAdded(SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.MultipleConsoleEntityDrawingComponent">
            <summary>
            Add to a <see cref="T:SadConsole.Console"/> to draw the <see cref="P:SadConsole.Components.MultipleConsoleEntityDrawingComponent.Entities"/> on it. May be used with multiple consoles.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MultipleConsoleEntityDrawingComponent.Entities">
            <summary>
            Entities to draw on each console this component is added to.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MultipleConsoleEntityDrawingComponent.HandleIsVisible">
            <summary>
            If set to true, controls the <see cref="P:SadConsole.Console.IsVisible"/> property of the attached object.
            </summary>
        </member>
        <member name="M:SadConsole.Components.MultipleConsoleEntityDrawingComponent.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.MultipleConsoleEntityDrawingComponent.Draw(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Console">
            <summary>
            A <see cref="T:SadConsole.CellSurface"/> that has a font and can be drawn to the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ComponentsUpdate">
            <summary>
            A filtered list from <see cref="P:SadConsole.Console.Components"/> where <see cref="P:SadConsole.Components.IConsoleComponent.IsUpdate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ComponentsDraw">
            <summary>
            A filtered list from <see cref="P:SadConsole.Console.Components"/> where <see cref="P:SadConsole.Components.IConsoleComponent.IsDraw"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ComponentsMouse">
            <summary>
            A filtered list from <see cref="P:SadConsole.Console.Components"/> where <see cref="P:SadConsole.Components.IConsoleComponent.IsMouse"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ComponentsKeyboard">
            <summary>
            A filtered list from <see cref="P:SadConsole.Console.Components"/> where <see cref="P:SadConsole.Components.IConsoleComponent.IsKeyboard"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Components">
            <summary>
            A collection of components processed by this console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.FocusedMode">
            <summary>
            How the console should handle becoming active.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Position">
            <summary>
            The position of the screen object.
            </summary>
            <remarks>This position has no substance.</remarks>
        </member>
        <member name="P:SadConsole.Console.CalculatedPosition">
            <summary>
            A position that is based on the current <see cref="P:SadConsole.Console.Position"/> and <see cref="P:SadConsole.Console.Parent"/> position, in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.Console.Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Children">
            <summary>
            The child objects of this instance.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Parent">
            <summary>
            The parent object that this instance is a child of.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsVisible">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsPaused">
            <summary>
            Gets or sets the paused status of this object.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsFocused">
            <summary>
            Gets or sets this console as the focused console for input.
            </summary>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height. Uses <see cref="P:SadConsole.Global.FontDefault"/> as the font.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.Cell[])">
            <summary>
            Creates a new console with the specified width, height, and the cells backing the console. Uses <see cref="P:SadConsole.Global.FontDefault"/> as the font.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="cells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new console with the specified width, height, and font.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the conosle.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.Font,SadConsole.Cell[])">
            <summary>
            Creates a new console with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="font">The font used with rendering.</param>
            <param name="cells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.Cell[],SadConsole.Font,System.Boolean)">
            <summary>
            Creates a new console. This is a custom constructor that leaves the creation of leaves <see cref="P:SadConsole.Console.RenderCells"/> and <see cref="P:SadConsole.Console.LastRenderResult"/> creation up to the the child class.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="cells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
            <param name="font">The font used with rendering.</param>
            <param name="skipRenderCreation">Must be set to true.</param>
        </member>
        <member name="M:SadConsole.Console.OnCellsReset">
            <summary>
            Calls <see cref="M:SadConsole.Console.SetRenderCells"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnCalculateRenderPosition">
            <summary>
            Sets a value for <see cref="P:SadConsole.Console.CalculatedPosition"/> based on the <see cref="P:SadConsole.Console.Position"/> of this instance and the <see cref="P:SadConsole.Console.Parent"/> instance.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost. Hides the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocused">
            <summary>
            Called when this console is focused. Shows the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnBeforeRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in rendering.</param>
        </member>
        <member name="M:SadConsole.Console.OnParentChanged(SadConsole.Console,SadConsole.Console)">
            <summary>
            Called when the parent console changes for this console.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.Console.OnPositionChanged(Microsoft.Xna.Framework.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.Console.Position" /> property changes.
            </summary>
            <param name="oldLocation">The location before the change.</param>
        </member>
        <member name="M:SadConsole.Console.OnVisibleChanged">
            <summary>
            Called when the visibility of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnPausedChanged">
            <summary>
            Called when the paused status of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.Console.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Console"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Console.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Console"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="E:SadConsole.Console.MouseButtonClicked">
            <summary>
            Raised when the a mouse button is clicked on this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseMove">
            <summary>
            Raised when the mouse moves around the this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseExit">
            <summary>
            Raised when the mouse exits this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseEnter">
            <summary>
            Raised when the mouse enters this console.
            </summary>
        </member>
        <member name="F:SadConsole.Console.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.MoveToFrontOnMouseClick">
            <summary>
            When true, this console will move to the front of its parent console when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Console.FocusOnMouseClick">
            <summary>
            When true, this console will set <see cref="P:SadConsole.Console.IsFocused"/> to true when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UseKeyboard">
            <summary>
            Allows this console to accept keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Console.UseMouse">
            <summary>
            Allows this console to accept mouse input.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnMouseEnter(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseEnter"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseExit"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseMove(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseMove"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseLeftClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseButtonClicked"/> event. Possibly moves the console to the top of it's parent's children collection.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnRightMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseButtonClicked"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.LostMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            If the mouse is not over the console, causes the protected <see cref="M:SadConsole.Console.OnMouseExit(SadConsole.Input.MouseConsoleState)"/> method to run which raises the <see cref="E:SadConsole.Console.MouseExit"/> event.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:SadConsole.Console.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="state">The mouse state related to this console.</param>
            <returns>True when the mouse is over this console and processing should stop.</returns>
        </member>
        <member name="M:SadConsole.Console.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard.
            </summary>
            <param name="info">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="T:SadConsole.Console.ActiveBehavior">
            <summary>
            How the console handles becoming focused and added to the <see cref="F:SadConsole.Global.FocusedConsoles"/> collection.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Set">
            <summary>
            Becomes the only active input object when focused.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Push">
            <summary>
            Pushes to the top of the stack when it becomes the active input object.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsCursorDisabled">
            <summary>
            When <see langword="true"/>, indicates that the <see cref="P:SadConsole.Console.Cursor"/> cannot be used on this console; otherwise, <see langword="false"/>.
            </summary>
            <remarks>
            This property should only be used to indicate that this object can never use the <see cref="P:SadConsole.Console.Cursor"/>. To simply disable or enable the <see cref="P:SadConsole.Console.Cursor"/>, use <see cref="P:SadConsole.Cursor.IsEnabled"/> and <see cref="P:SadConsole.Cursor.IsVisible"/>.
            </remarks>
        </member>
        <member name="P:SadConsole.Console.Renderer">
            <summary>
            The renderer used to draw this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Console.RenderRects">
            <summary>
            Destination rectangles for rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Console.RenderCells">
            <summary>
            Cells that will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AbsoluteArea">
            <summary>
            Pixel area of the render cells.
            </summary>
        </member>
        <member name="P:SadConsole.Console.LastRenderResult">
            <summary>
            The last texture render pass for this surface.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Cursor">
            <summary>
            The private virtual cursor reference.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AutoCursorOnFocus">
            <summary>
            Toggles the VirtualCursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="M:SadConsole.Console.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.Console.LastRenderResult"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.Draw(System.TimeSpan)">
            <summary>
            Draws all <see cref="P:SadConsole.Console.Children"/>.
            </summary>
            <param name="timeElapsed">Time since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.Console.IsVisible"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.Console.Update(System.TimeSpan)">
            <summary>
            Updates all <see cref="P:SadConsole.Console.Children"/>.
            </summary>
            <param name="timeElapsed">Time since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.Console.IsPaused"/> is <see langword="false"/>.</remarks>
        </member>
        <member name="M:SadConsole.Console.SetRenderCells">
            <summary>
            Configures <see cref="P:SadConsole.Console.RenderCells"/>, <see cref="P:SadConsole.Console.RenderRects"/>, and <see cref="P:SadConsole.Console.LastRenderResult"/> for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFontChanged">
            <summary>
            Called when the <see cref="P:SadConsole.Console.Font"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.Console.FromSurface(SadConsole.CellSurface,SadConsole.Font)">
            <summary>
            Creates a new console from an existing surface.
            </summary>
            <param name="surface"></param>
            <param name="font">The font to associate with the new console.</param>
            <returns>A new console.</returns>
        </member>
        <member name="T:SadConsole.ConsoleCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.Console"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleCollection.IsLocked">
            <summary>
            When true, the collection cannot be modified.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleCollection.Item(System.Int32)">
            <summary>
            Gets or sets a child object for this collection.
            </summary>
            <param name="index">The index of the child object.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ConsoleCollection.#ctor(SadConsole.Console)">
            <summary>
            Creates a new screen object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleCollection.Contains(SadConsole.Console)">
            <summary>
            Returns true if this console list contains the specified <paramref name="screen"/>.
            </summary>
            <param name="screen">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ConsoleCollection.IsTop(SadConsole.Console)">
            <summary>
            When true, indicates that the <paramref name="screen"/> is at the top of the collection stack.
            </summary>
            <param name="screen">The screen object to check.</param>
            <returns>True when the object is on top.</returns>
        </member>
        <member name="M:SadConsole.ConsoleCollection.Add(SadConsole.Console)">
            <summary>
            Adds a new child object to this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ConsoleCollection.IsLocked"/> property is set to true.</exception>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.Insert(System.Int32,SadConsole.Console)">
            <summary>
            Inserts a child object at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ConsoleCollection.IsLocked"/> property is set to true.</exception>
            <param name="index">The 0-based index to insert the object at.</param>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.Remove(SadConsole.Console)">
            <summary>
            Removes a new child object from this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ConsoleCollection.IsLocked"/> property is set to true.</exception>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.MoveToTop(SadConsole.Console)">
            <summary>
            Moves the specified <paramref name="screen"/>  to the top of the collection.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.MoveToBottom(SadConsole.Console)">
            <summary>
            Moves the specified <paramref name="screen"/>  to the bottom of the collection.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.IndexOf(SadConsole.Console)">
            <summary>
            Gets the 0-based index of the <paramref name="screen"/>.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ConsoleCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.ConsoleStack">
            <summary>
            A stack of consoles. The top-most of the stack is considered active and represented by the <see cref="P:SadConsole.ConsoleStack.Console"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ConsoleStack.Console">
            <summary>
            Gets the current active console.
            </summary>
        </member>
        <member name="F:SadConsole.ConsoleStack.consoles">
            <summary>
            The stack of consoles for input processing.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleStack.Clear">
            <summary>
            Clears all consoles from the active stack along with the current active console.
            </summary>
        </member>
        <member name="M:SadConsole.ConsoleStack.Push(SadConsole.Console)">
            <summary>
            Adds another console to active stack, setting it as the active (top most in the stack) console.
            </summary>
            <param name="console"></param>
        </member>
        <member name="M:SadConsole.ConsoleStack.Set(SadConsole.Console)">
            <summary>
            Replaces the top console (active console) with the provided instance. Sets <see cref="P:SadConsole.ConsoleStack.Console"/> to this instance.
            </summary>
            <param name="console">The console to make active.</param>
        </member>
        <member name="M:SadConsole.ConsoleStack.Pop(SadConsole.Console)">
            <summary>
            Removes the console from the active stack. If the instance is the current active console, the active console is set to the last console in the previous console.
            </summary>
            <param name="console">The console to remove.</param>
        </member>
        <member name="T:SadConsole.ContainerConsole">
            <summary>
            A <see cref="T:SadConsole.Console"/> that only processes children and does not render anything.
            </summary>
        </member>
        <member name="T:SadConsole.ControlsConsole">
            <summary>
            A basic console that can contain controls.
            </summary>
        </member>
        <member name="F:SadConsole.ControlsConsole.KeyboardState">
            <summary>
            Keyboard processor shared by all Controls Consoles.
            </summary>
        </member>
        <member name="F:SadConsole.ControlsConsole.ControlsList">
            <summary>
            The collection of controls.
            </summary>
        </member>
        <member name="F:SadConsole.ControlsConsole.UseGlobalKeyboardInput">
            <summary>
            When set to false, uses the static <see cref="F:SadConsole.ControlsConsole.KeyboardState"/> keyboard instead of <see cref="P:SadConsole.Global.KeyboardState"/>
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.Theme">
            <summary>
            Gets or sets the theme of the window.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.Controls">
            <summary>
            Gets a read-only collection of the controls this console contains.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.CapturedControl">
            <summary>
            Gets the control currently capturing mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.FocusedControl">
            <summary>
            Gets or sets the control that has keyboard focus.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.CanTabToNextConsole">
            <summary>
            When true, allows the tab command to move to the next console (when there is a parent) instead of cycling back to the first control on this console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.NextTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.ControlsConsole.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.PreviousTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.ControlsConsole.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.ControlsConsole.DisableControlFocusing">
            <summary>
            When set to true, child controls are not alerted to (non-)focused states.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new instance of the controls console with the specified width and height.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
             Creates a new instance of the controls console with the specified width, height, and font.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="font">The font used with the console.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.Add(SadConsole.Controls.ControlBase)">
            <summary>
            Adds an existing control to this console.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.Remove(SadConsole.Controls.ControlBase)">
            <summary>
            Removes a control from this console.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.TabNextControl">
            <summary>
            Gives the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.TabPreviousControl">
            <summary>
            Gives focus to the previous control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.TryTabPreviousConsole">
            <summary>
            Tries to tab to the console that comes before this one in the <see cref="P:SadConsole.Console.Parent"/> collection of <see cref="P:SadConsole.Console.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.TryTabNextConsole">
            <summary>
            Tries to tab to the console that comes after this one in the <see cref="P:SadConsole.Console.Parent"/> collection of <see cref="P:SadConsole.Console.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.RemoveAll">
            <summary>
            Removes all controls from this console.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.Contains(SadConsole.Controls.ControlBase)">
            <summary>
            Checks if the specified control exists in this console.
            </summary>
            <param name="control">The control to check.</param>
            <returns>True when the control exists in this console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.FocusedControlChanging(SadConsole.Controls.ControlBase,SadConsole.Controls.ControlBase)">
            <summary>
            When overridden, allows you to prevent a control from taking focus from another control.
            </summary>
            <param name="newControl">The control requesting focus.</param>
            <param name="oldControl">The control that has focus.</param>
            <returns>True when the focus change is allowed; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.FocusedControlChanged(SadConsole.Controls.ControlBase,SadConsole.Controls.ControlBase)">
            <summary>
            This method is called when a control gains focus.
            </summary>
            <param name="newControl">The control that has focus.</param>
            <param name="oldControl">The control that previously had focus.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ReOrderControls">
            <summary>
            Reorders the control collection based on the tab index of each control.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.OnDirtyChanged">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ControlsConsole.Invalidate">
            <summary>
            Signals that the console should be considered dirty and reapplies the <see cref="P:SadConsole.ControlsConsole.Theme"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.Update(System.TimeSpan)">
            <summary>
            Calls the Update method of the base class and then Update on each control.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.Draw(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ControlsConsole.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard for the console.
            </summary>
            <param name="info">Keyboard information sent by the engine.</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse for the console.
            </summary>
            <param name="state">Mouse information sent by the engine.</param>
            <returns>True when the mouse is over this console and it is the active console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ControlsConsole.CaptureControl(SadConsole.Controls.ControlBase)">
            <summary>
            Captures a control for exclusive mouse focus. Sets the ExclusiveMouse property to true.
            </summary>
            <param name="control">The control to capture</param>
        </member>
        <member name="M:SadConsole.ControlsConsole.ReleaseControl">
            <summary>
            Releases the control from exclusive mouse focus. Sets the ExclusiveMouse property to false and sets the CapturedControl property to null.
            </summary>
        </member>
        <member name="M:SadConsole.ControlsConsole.GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.ControlsConsole.OnFocused">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ControlsConsole.OnFocusLost">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Controls.ButtonBase">
            <summary>
            Base class for creating a button type control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ButtonBase.Click">
            <summary>
            Raised when the button is clicked.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase.text">
            <summary>
            The display text of the button.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ButtonBase.textAlignment">
            <summary>
            The alignment of the <see cref="F:SadConsole.Controls.ButtonBase.text"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ButtonBase.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ButtonBase.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new button control.
            </summary>
            <param name="width">Width of the button.</param>
            <param name="height">Height of the button.</param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase.DoClick">
            <summary>
            Raises the <see cref="E:SadConsole.Controls.ButtonBase.Click"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Detects if the SPACE and ENTER keys are pressed and calls the <see cref="E:SadConsole.Controls.ButtonBase.Click"/> method.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:SadConsole.Controls.ButtonBase.OnLeftMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the left-mouse button is clicked.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="T:SadConsole.Controls.Button">
            <summary>
            Simple button control with a height of 1.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.Button.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="T:SadConsole.Controls.CheckBox">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.CheckBox.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.CheckBox.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.Controls.CheckBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.CheckBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.ControlBase">
            <summary>
            Base class for all controls.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlBase.isMouseLeftDown">
            <summary>
            <see langword="true"/> when the left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlBase.isMouseRightDown">
            <summary>
            <see langword="true"/> when the right mouse button is down.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Surface">
            <summary>
            The cell data to render the control. Controlled by a theme.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.MouseBounds">
            <summary>
            The region the of the control used for mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Position">
            <summary>
            Indicates the rendering location of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsVisible">
            <summary>
            Indicates weather or not this control is visible.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.TabStop">
            <summary>
            Indicates weather or not this control can be tabbed to.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.TabIndex">
            <summary>
            Sets the tab index of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsDirty">
            <summary>
            Indicates weather or not this control is dirty and should be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Name">
            <summary>
            Represents a name to identify a control by.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.FocusOnClick">
            <summary>
            Gets or sets weather or not this control will become focused when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Width">
            <summary>
            The width of the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Height">
            <summary>
            The height of the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsFocused">
            <summary>
            Gets or sets weather or not this control is focused.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.IsEnabled">
            <summary>
            Gets or sets weather or not this control is enabled.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Bounds">
            <summary>
            The area this control covers.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Parent">
            <summary>
            Gets or sets the parent console of this control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.Theme">
            <summary>
            The custom theme to use with this control. If set to <see langword="null"/>, will use the theme assigned by the <see cref="P:SadConsole.Controls.ControlBase.Parent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ControlBase.State">
            <summary>
            The state of the control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseEnter">
            <summary>
            Raised when the mouse enters this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseExit">
            <summary>
            Raised when the mouse exits this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseMove">
            <summary>
            Raised when the mouse is moved over this control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ControlBase.MouseButtonClicked">
            <summary>
            Raised when a mouse button is clicked while the mouse is over this control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Creates a control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.FocusLost">
            <summary>
            Called when the control loses focus. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Focused">
            <summary>
            Called when the control is focused. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnThemeChanged">
            <summary>
            Called when the <see cref="P:SadConsole.Controls.ControlBase.Theme"/> changes.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.RefreshParentTheme">
            <summary>
            Gets the latest theme from the parent's library unless a theme has been explicitly set.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.GetThemeColors">
            <summary>
            Gets the theme colors associated with this control.
            </summary>
            <returns>Theme colors.</returns>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the keyboard is used on this control.
            </summary>
            <param name="state">The state of the keyboard.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Checks if the mouse is the control and calls the appropriate mouse methods.
            </summary>
            <param name="state">Mouse information.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.LostMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called to trigger the state of losing mouse focus.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnParentChanged">
            <summary>
            Called when the parent property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnPositionChanged">
            <summary>
            Called when the control changes position.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.DetermineState">
            <summary>
            Sets the appropriate theme for the control based on the current state of the control.
            </summary>
            <remarks>Called by the control as the mouse state changes, like when the mouse is clicked on top of the control or leaves the area of the control. This method is implemented by each derived control.</remarks>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnStateChanged(SadConsole.Controls.ControlStates,SadConsole.Controls.ControlStates)">
            <summary>
            Called when the <see cref="P:SadConsole.Controls.ControlBase.State"/> changes. Sets the <see cref="P:SadConsole.Controls.ControlBase.IsDirty"/> to true.
            </summary>
            <param name="oldState">The original state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseEnter(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse first enters the control. Raises the MouseEnter event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the mouse exits the area of the control. Raises the MouseExit event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnMouseIn(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called as the mouse moves around the control area. Raises the MouseMove event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnLeftMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the left mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.OnRightMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Called when the right mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.TransformConsolePositionByControlPosition(Microsoft.Xna.Framework.Point)">
            <summary>
            Helper method that returns the mouse x,y position for the control.
            </summary>
            <param name="consolePosition">Position of the console to get the relative control position from.</param>
            <returns>The x,y position of the mouse over the control.</returns>
        </member>
        <member name="M:SadConsole.Controls.ControlBase.Update(System.TimeSpan)">
            <summary>
            Update the control appearance based on <see cref="M:SadConsole.Controls.ControlBase.DetermineState"/> and <see cref="P:SadConsole.Controls.ControlBase.IsDirty"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.ControlStates">
            <summary>
            Indicates the state of a control.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.Normal">
            <summary>
            Normal state. 
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.Disabled">
            <summary>
            The control is disabled.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.Focused">
            <summary>
            The control has focus.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.Clicked">
            <summary>
            The control is selected
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.MouseOver">
            <summary>
            The mouse is over the control.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.MouseLeftButtonDown">
            <summary>
            The left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.MouseRightButtonDown">
            <summary>
            The Right mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ControlStates.Selected">
            <summary>
            THe control is selected
            </summary>
        </member>
        <member name="T:SadConsole.Controls.DrawingSurface">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.DrawingSurface.OnDraw">
            <summary>
            
            </summary>
        </member>
        <member name="M:SadConsole.Controls.DrawingSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="E:SadConsole.Controls.ListBox.SelectedItemChanged">
            <summary>
            An event that triggers when the <see cref="P:SadConsole.Controls.ListBox.SelectedItem"/> changes.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ListBox.SelectedItemExecuted">
            <summary>
            An event that triggers when an item is double clicked or the Enter key is pressed while the listbox has focus.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.ItemTheme">
            <summary>
            The theme used by the listbox items.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.IsScrollBarVisible">
            <summary>
            Internal use only; used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.ScrollBar">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.ScrollBarRenderLocation">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.RelativeIndexMouseOver">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.CompareByReference">
            <summary>
            When the <see cref="P:SadConsole.Controls.ListBox.SelectedItem"/> changes, and this property is true, objects will be compared by reference. If false, they will be compared by value.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ListBox.SingleClickItemExecute">
            <summary>
            When set to <see langword="true"/>, the <see cref="E:SadConsole.Controls.ListBox.SelectedItemExecuted"/> event will fire when an item is single-clicked instead of double-clicked.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ListBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the listbox control.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ListBox.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Controls.ProgressBar">
            <summary>
            A control that fills an area (vertical or horizontal) according to a value.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.ProgressBar.ProgressChanged">
            <summary>
            Called when the <see cref="P:SadConsole.Controls.ProgressBar.Progress"/> property value changes.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.progressValue">
            <summary>
            The progress bar fill value. Between 0f and 1f.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.controlSize">
            <summary>
            The size of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.fillSize">
            <summary>
            The size of the bar currently filled based on the <see cref="P:SadConsole.Controls.ProgressBar.Progress"/> property.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.isHorizontal">
            <summary>
            Flag to indicate this bar was created horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.horizontalAlignment">
            <summary>
            The alignment if the bar is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.ProgressBar.verticalAlignment">
            <summary>
            The alignment if the bar is vertical.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.HorizontalAlignment">
            <summary>
            The horizontal orientation used when <see cref="P:SadConsole.Controls.ProgressBar.IsHorizontal"/> is set to true.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.VerticalAlignment">
            <summary>
            The vertical orientation used when <see cref="P:SadConsole.Controls.ProgressBar.IsHorizontal"/> is set to false.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.IsHorizontal">
            <summary>
            When true, the progress bar uses the <see cref="P:SadConsole.Controls.ProgressBar.HorizontalAlignment"/> property to determine the starting fill direction. When false, uses the <see cref="P:SadConsole.Controls.ProgressBar.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ProgressBar.Progress">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.HorizontalAlignment)">
            <summary>
            Creates a new horizontal progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="horizontalAlignment">Sets the control to be horizontal, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="horizontalAlignment"/> is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.VerticalAlignment)">
            <summary>
            Creates a new vertical progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="verticalAlignment">Sets the control to be vertical, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="verticalAlignment"/> is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.Controls.ProgressBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.RadioButton">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.RadioButton.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.GroupName">
            <summary>
            The group of the radio button. All radio buttons with the same group name will work together to keep one radio button selected at a time.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.RadioButton.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.Controls.RadioButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.Controls.RadioButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.Controls.ScrollBar">
            <summary>
            Represents a scrollbar control.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Value">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value for the scrollbar.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.ScrollBar.Step">
            <summary>
            Gets or sets the amount of values to add or substract to the <see cref="P:SadConsole.Controls.ScrollBar.Value"/> when the up or down arrows are used.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.ScrollBar.#ctor(SadConsole.Orientation,System.Int32)">
            <summary>
            Creates a new ScrollBar control.
            </summary>
            <param name="orientation">Sets the control to either horizontal or vertical.</param>
            <param name="size">The height or width of the control.</param>
            <returns>The new control instance.</returns>
        </member>
        <member name="M:SadConsole.Controls.ScrollBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Not Used.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:SadConsole.Controls.SelectionButton">
            <summary>
            Provides a button-like control that changes focus to a designated previous or next selection button when the arrow keys are pushed.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.SelectionButton.PreviousSelection">
            <summary>
            The selection button to focus when the UP key is pressed or the SelectPrevious() method is called.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.SelectionButton.NextSelection">
            <summary>
            The selection button to focus when the DOWN key is pressed or the SelectNext() method is called.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Selection Button with a specific width and height.
            </summary>
            <param name="width">The width of the selection button.</param>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SetNextSelection(SadConsole.Controls.SelectionButton@,System.Boolean)">
            <summary>
            Sets the next selection button and optionally sets the previous of the referenced selection to this button.
            </summary>
            <param name="nextSelection">The selection button to be used as next.</param>
            <param name="setPreviousOnNext">Sets the PreviousSelection property on the <paramref name="nextSelection"/> instance to current selection button. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Focuses the previous or next selection button depending on if the UP or DOWN arrow keys were pressed.
            </summary>
            <param name="info">The keyboard state.</param>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SelectPrevious">
            <summary>
            Selects the previous selection button.
            </summary>
            <returns>Returns the previous selection button.</returns>
        </member>
        <member name="M:SadConsole.Controls.SelectionButton.SelectNext">
            <summary>
            Selects the next selection button.
            </summary>
            <returns>Returns the next selection button.</returns>
        </member>
        <member name="T:SadConsole.Controls.TextBox">
            <summary>
            InputBox control that allows text input.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox.PasswordChar">
            <summary>
            Mask input with a certain character.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox.IsCaretVisible">
            <summary>
            Indicates the caret is visible.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._validNumbers">
            <summary>
            A list of valid number characters
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._alignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.LeftDrawOffset">
            <summary>
            When editing the text box, this allows the text to scroll to the right so you can see what you are typing.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._caretPos">
            <summary>
            The location of the caret.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._text">
            <summary>
            The text value of the input box.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._isNumeric">
            <summary>
            Indicates the input box is numeric only.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._allowDecimalPoint">
            <summary>
            Indicates that the input box (when numeric) will accept decimal points.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox._currentAppearance">
            <summary>
            The current appearance of the control.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.TextBox.TextChanged">
            <summary>
            Raised when the text has changed and the preview has accepted it.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.TextBox.TextChangedPreview">
            <summary>
            Raised before the text has changed and allows the change to be cancelled.
            </summary>
        </member>
        <member name="E:SadConsole.Controls.TextBox.KeyPressed">
            <summary>
            Raised when a key is pressed on the textbox.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox.DisableMouse">
            <summary>
            Disables mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.DisableKeyboard">
            <summary>
            Disables the keyboard which turns off keyboard input and hides the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.EditingText">
            <summary>
            A temp holder for the text as it's being edited.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.TextAlignment">
            <summary>
            The alignment of the caret.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.MaxLength">
            <summary>
            How big the text can be. Setting this to 0 will make it unlimited.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.CaretPosition">
            <summary>
            Gets or sets the position of the caret in the current text.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.Text">
            <summary>
            Gets or sets the text of the input box.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.IsNumeric">
            <summary>
            Gets or sets weather or not this input box only allows numeric input.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.AllowDecimal">
            <summary>
            Gets or sets weather or not this input box should restrict numeric input should allow a decimal point.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the input box.
            </summary>
            <param name="width">The width of the input box.</param>
        </member>
        <member name="M:SadConsole.Controls.TextBox.Validate">
            <summary>
            Validates that the value of the input box conforms to the settings of this control and sets the dirty flag to true.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.ValidateCursorPosition">
            <summary>
            Correctly positions the cursor within the text.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="M:SadConsole.Controls.TextBox.FocusLost">
            <summary>
            Called when the control loses focus.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.Focused">
            <summary>
            Called when the control is focused.
            </summary>
        </member>
        <member name="T:SadConsole.Controls.TextBox.TextChangedEventArgs">
            <summary>
            Event arguments that indicate the change in text for a textbox control.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox.TextChangedEventArgs.OldValue">
            <summary>
            The original text value.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.TextChangedEventArgs.NewValue">
            <summary>
            The new text of the textbox.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.TextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new event args object.
            </summary>
            <param name="oldValue">The original value of the text.</param>
            <param name="newValue">The value the text is chaning to.</param>
        </member>
        <member name="T:SadConsole.Controls.TextBox.KeyPressEventArgs">
            <summary>
            Event arguments to indicate that a key is being pressed on the textbox.
            </summary>
        </member>
        <member name="F:SadConsole.Controls.TextBox.KeyPressEventArgs.Key">
            <summary>
            The key being pressed by the textbox.
            </summary>
        </member>
        <member name="P:SadConsole.Controls.TextBox.KeyPressEventArgs.IsCancelled">
            <summary>
            When set to <see langword="true"/>, causes the textbox to cancel the key press.
            </summary>
        </member>
        <member name="M:SadConsole.Controls.TextBox.KeyPressEventArgs.#ctor(SadConsole.Input.AsciiKey)">
            <summary>
            Creates a new event args object.
            </summary>
            <param name="key">The key being pressed.</param>
        </member>
        <member name="T:SadConsole.Cursor">
            <summary>
            A cursor that is attached to a <see cref="T:SadConsole.Console"/> used for printing.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.CursorEffect">
            <summary>
            This is the cursor visible effect, like blinking.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintOnlyCharacterData">
            <summary>
            When true, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.IsEnabled">
            <summary>
            When true, allows the <see cref="M:SadConsole.Cursor.ProcessKeyboard(SadConsole.Input.Keyboard)"/> method to run.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.DisableWordBreak">
            <summary>
            When true, prevents the any print method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseStringParser">
            <summary>
            Calls <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> to create a colored string when using <see cref="M:SadConsole.Cursor.Print(System.String)"/> or <see cref="M:SadConsole.Cursor.Print(System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)"/>
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that the when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.#ctor(SadConsole.CellSurface)">
            <summary>
            Creates a new instance of the cursor class that will work with the specified console.
            </summary>
            <param name="console">The console this cursor will print on.</param>
        </member>
        <member name="M:SadConsole.Cursor.AttachSurface(SadConsole.CellSurface)">
            <summary>
            Sets the console this cursor is targetting.
            </summary>
            <param name="console">The console the cursor works with.</param>
        </member>
        <member name="M:SadConsole.Cursor.ResetCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Cursor.CursorRenderCell"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.ResetAppearanceToConsole">
            <summary>
            Resets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the backing console's CellData is null.</exception>
        </member>
        <member name="M:SadConsole.Cursor.SetPrintAppearance(SadConsole.Cell)">
            <summary>
            Sets <see cref="P:SadConsole.Cursor.PrintAppearance"/>.
            </summary>
            <param name="appearance">The appearance to set.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String,SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:SadConsole.Cursor.CarriageReturn"/> and <see cref="M:SadConsole.Cursor.LineFeed"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Move(Microsoft.Xna.Framework.Point)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="position">The destination of the cursor.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="x">The x (horizontal) of the position.</param>
            <param name="y">The x (vertical) of the position.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch,SadConsole.Font,Microsoft.Xna.Framework.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Cursor.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Automates the cursor based on keyboard input.
            </summary>
            <param name="info">The state of the keyboard</param>
            <returns>Returns true when the keyboard caused the cursor to do something.</returns>
        </member>
        <member name="T:SadConsole.Directions">
            <summary>
            Direction related types and methods.
            </summary>
        </member>
        <member name="P:SadConsole.Directions.North">
            <summary>
            Returns a point that faces north (0, -1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.South">
            <summary>
            Returns a point that faces south (0, 1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.East">
            <summary>
            Returns a point that faces east (1, 0);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.West">
            <summary>
            Returns a point that faces west (-1, 0);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.NorthWest">
            <summary>
            Returns a point that faces north west (-1, -1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.NorthEast">
            <summary>
            Returns a point that faces north east (1, -1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.SouthWest">
            <summary>
            Returns a point that faces south west (-1, 1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.SouthEast">
            <summary>
            Returns a point that faces south east (1, 1);
            </summary>
        </member>
        <member name="P:SadConsole.Directions.Points">
            <summary>
            Returns an array of directional points that use the index from <see cref="T:SadConsole.Directions.DirectionEnum"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Directions.DirectionEnum">
            <summary>
            A compass direction enumeration.
            </summary>
        </member>
        <member name="M:SadConsole.Directions.GetOpposite(SadConsole.Directions.DirectionEnum)">
            <summary>
            Returns the opposite direction of a <see cref="T:SadConsole.Directions.DirectionEnum"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetCardinalDirection(SadConsole.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Discards NW/NE/SW/SE directions in favor of N/S/E/W for a <see cref="T:SadConsole.Directions.DirectionEnum"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="favorNorthSouth">If true, returns N for NW/NE and S for SW/SE. Otherwise W for SW/NW and E for SE/NE.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:SadConsole.Directions.TurnLeft(SadConsole.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Gets the direction left of the <paramref name="direction"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="useDiagonal">If true, uses NW/NE/SW/SE in considering the result. Otherwise the result will always be a N/S/E/W value.</param>
            <returns>The left direction.</returns>
        </member>
        <member name="M:SadConsole.Directions.TurnRight(SadConsole.Directions.DirectionEnum,System.Boolean)">
            <summary>
            Gets the direction right of the <paramref name="direction"/> value.
            </summary>
            <param name="direction">The direction.</param>
            <param name="useDiagonal">If true, uses NW/NE/SW/SE in considering the result. Otherwise the result will always be a N/S/E/W value.</param>
            <returns>The right direction.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetValidDirections(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the (0, 0, <paramref name="width"/>, <paramref name="height"/>) area.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetValidDirections(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetValidDirections(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed with the value of a <see cref="T:SadConsole.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetDirectionPoints(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets an indexed array of direction positions based on the <paramref name="position"/>.
            </summary>
            <param name="position">The source position.</param>
            <returns>An array of positions indexed with the value of a <see cref="T:SadConsole.Directions.DirectionEnum"/>.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetDirectionIndexes(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Gets an array of <see cref="!:SadConsole.Surfaces.ISurface.Cells"/> indexes of each <see cref="T:SadConsole.Directions.DirectionEnum"/> from the current <paramref name="position"/>.
            </summary>
            <param name="position">The position center.</param>
            <param name="areaWidth">The width of the area.</param>
            <param name="areaHeight">The height of the area.</param>
            <returns>The index of each position. A value of -1 represents an invalid position.</returns>
        </member>
        <member name="M:SadConsole.Directions.GetDirectionIndexes(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets an array of <see cref="!:SadConsole.Surfaces.ISurface.Cells"/> indexes of each <see cref="T:SadConsole.Directions.DirectionEnum"/> from the current <paramref name="position"/>.
            </summary>
            <param name="position">The position center.</param>
            <param name="area">The area containing the position.</param>
            <returns>The index of each position. A value of -1 represents an invalid position.</returns>
        </member>
        <member name="M:SadConsole.Directions.ToHeading(SadConsole.Directions.DirectionEnum)">
            <summary>
            Returns a heading angle based on the direction.
            </summary>
            <param name="direction">Direction to convert.</param>
            <returns>An angle between 0 (east) and 315 (south east) degrees.</returns>
        </member>
        <member name="M:SadConsole.Directions.FromHeading(System.Single,System.Single)">
            <summary>
            Returns a direction based on a heading angle
            </summary>
            <param name="heading"></param>
            <param name="compensationHeading"></param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.DoubleAnimation.EasingFunction">
            <summary>
            An easing method to apply to the value. The parameters passed in are: calculated value, starting value, ending value, and duration.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color to fade out to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._delayFinished">
            <summary>
            A flag to indidcate that the delay timer has finished.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._timeElapsed">
            <summary>
            The total time elapsed while processing the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.CloneOnApply">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RemoveOnFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.DiscardCellState">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.Permanent">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.AddCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.UpdateCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.ClearCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything but delays. Usually used with the <see cref="T:SadConsole.Effects.EffectsChain"/> effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.AddCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.UpdateCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ClearCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.EffectsChain">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsChain.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.Count">
            <summary>
            Gets the number of effects.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.CellSurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.Cell,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a specific cell.
            </summary>
            <param name="cell">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.Cell},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cells"/> provided.
            </summary>
            <param name="cells">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.Cell)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.Double)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="timeElapsed">The time elapased since the last update.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Save(System.String)">
            <summary>
            Saves the effects and the associated cell indexes from the backing surface.
            </summary>
            <param name="file">The file to save the effects to.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Load(System.String,SadConsole.CellSurface)">
            <summary>
            Loads effects from a file.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="backingSurface">The surface the effects were originally (or will be) associated with.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.CellEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to seperate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in seconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellDestinationReverse">
            <summary>
            When <see cref="P:SadConsole.Effects.Fade.UseCellForeground"/> or <see cref="P:SadConsole.Effects.Fade.UseCellBackground"/> is set, and this is true, the last color in the fade will be set to the cell instead of the first.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.UpdateCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.ClearCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnApply">
            <summary>
            Flags this effect to be cloned when applied to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.DiscardCellState">
            <summary>
            When true, the effect should not call <see cref="M:SadConsole.Cell.RestoreState"/> when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.Permanent">
            <summary>
            When true, indicates the effect this effect has on a cell should remain after this effect is cleared from the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.AddCell(SadConsole.Cell)">
            <summary>
            Cell is first associated with the effect.
            </summary>
            <param name="cell">The surface cell using this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.UpdateCell(SadConsole.Cell)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="cell">The surface cell using this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.Double)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="gameTimeSeconds">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.ClearCell(SadConsole.Cell)">
            <summary>
            Clears the effect from the cell.
            </summary>
            <param name="cell">The surface cell that will no longer use this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.UpdateCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Recolor.ClearCell(SadConsole.Cell)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Entities.Entity">
            <summary>
            A positionable and animated game object.
            </summary>
        </member>
        <member name="E:SadConsole.Entities.Entity.AnimationStateChanged">
            <summary>
            Automatically forwards the <see cref="E:SadConsole.AnimatedConsole.AnimationStateChanged"/> event.
            </summary>
        </member>
        <member name="E:SadConsole.Entities.Entity.Moved">
            <summary>
            Triggered when the entity changes position.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.animation">
            <summary>
            Animation for the game object.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.positionOffset">
            <summary>
            The offset to render this object at.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Name">
            <summary>
            A friendly name of the game object.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animation">
            <summary>
            The current animation.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animations">
            <summary>
            Collection of animations associated with this game object.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.PositionOffset">
            <summary>
            Offsets the position by this amount.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Entity with the default font.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new Entity.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates a new 1x1 entity with the specified foreground, background, and glyph.
            </summary>
            <param name="foreground">The foreground color of the entity.</param>
            <param name="background">The background color of the entity.</param>
            <param name="glyph">The glyph color of the entity.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.AnimatedConsole)">
            <summary>
            Creates a new Entity with a default animation/
            </summary>
            <param name="animation">The default animation. The animation will have its <see cref="P:SadConsole.AnimatedConsole.Name"/> property changesd to "default".</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.OnAnimationStateChanged(System.Object,SadConsole.AnimatedConsole.AnimationStateChangedEventArgs)">
            <summary>
            Called when the current <see cref="P:SadConsole.Entities.Entity.Animation"/> raises the <see cref="E:SadConsole.AnimatedConsole.AnimationStateChanged"/> event and then raises the <see cref="E:SadConsole.Entities.Entity.AnimationStateChanged"/> event for the entity.
            </summary>
            <param name="sender">The animation calling this method.</param>
            <param name="e">The state of the animation.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.OnCalculateRenderPosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.OnFontChanged">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.OnPositionChanged(Microsoft.Xna.Framework.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.Console.Position"/> value changes. Triggers <see cref="E:SadConsole.Entities.Entity.Moved"/>.
            </summary>
            <param name="oldPosition"></param>
        </member>
        <member name="M:SadConsole.Entities.Entity.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Entities.Entity"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Entities.Entity"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:SadConsole.Entities.Entity.EntityMovedEventArgs">
            <summary>
            Arguments for the entity moved event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity">
            <summary>
            The entity associated with the event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.FromPosition">
            <summary>
            The positiont the <see cref="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity"/> moved from.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.EntityMovedEventArgs.#ctor(SadConsole.Entities.Entity,Microsoft.Xna.Framework.Point)">
            <summary>
            Creates a new event args for the entity movement.
            </summary>
            <param name="entity">The entity associated with the event.</param>
            <param name="oldPosition">The position the entity moved from.</param>
        </member>
        <member name="T:SadConsole.Entities.Hotspot">
            <summary>
            A group of positions with a set of settings.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Hotspot.Positions">
            <summary>
            The hotspot position on the map.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Hotspot.DebugAppearance">
            <summary>
            A visual for the area to help debug.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Hotspot.Settings">
            <summary>
            Key-value pairs for the hotspot.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Hotspot.#ctor">
            <summary>
            Creates a new hotspot object.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Hotspot.Contains(Microsoft.Xna.Framework.Point)">
            <summary>
            Return true when the specified point is in the list of <see cref="P:SadConsole.Entities.Hotspot.Positions"/>.
            </summary>
            <param name="point">The position to check for.</param>
            <returns>True or false based on if the position is associated with the Hotspot.</returns>
        </member>
        <member name="M:SadConsole.Entities.Hotspot.OnParentChanged(SadConsole.Console,SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Hotspot.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Entities.Zone">
            <summary>
            Defines an area for a scene.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Zone.Area">
            <summary>
            The area the zone covers.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Zone.DebugTitle">
            <summary>
            A title for the area.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Zone.DebugAppearance">
            <summary>
            A visual for the area to help debug.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Zone.Settings">
            <summary>
            Key-value pairs for the zone.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Zone.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new zone object with the specified area.
            </summary>
            <param name="area">The area of the zone.</param>
        </member>
        <member name="M:SadConsole.Entities.Zone.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Zone.Draw(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Zone.OnParentChanged(SadConsole.Console,SadConsole.Console)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.CellExtensions">
            <summary>
            Extension methods for the <see cref="T:SadConsole.Cell"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.CellExtensions.Expand``1(``0[],System.Int32)">
            <summary>
            Expands a 1-dimensional array into a 2-dimensional array.
            </summary>
            <param name="items">The original array to use.</param>
            <param name="width">The width the array represents.</param>
            <returns>A new 2-dimensional array.</returns>
        </member>
        <member name="M:SadConsole.CellExtensions.Flatten``1(``0[0:,0:])">
            <summary>
            Flattens a 2-dimensional array into a 1-dimensional array.
            </summary>
            <typeparam name="TCell"></typeparam>
            <param name="items"></param>
            <returns>A flattened array of items.</returns>
        </member>
        <member name="M:SadConsole.IListExtensions.RemoveAll(System.Collections.IList)">
            <summary>
            Removes each item from a list one-by-one.
            </summary>
            <param name="list">The list collection to remove from.</param>
        </member>
        <member name="M:SadConsole.RectangleExtensions.CenterViewPortOnPoint(SadConsole.IConsoleViewPort,Microsoft.Xna.Framework.Point)">
            <summary>
            Centers a console with a viewport on a specific point.
            </summary>
            <param name="surface">The console viewport to adjust.</param>
            <param name="target">The location of the point to center on.</param>
        </member>
        <member name="M:SadConsole.RectangleExtensions.CenterOnPoint(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Repositions the center of a rectangle to a specific point. Keeps the rectangle within the specified bounds.
            </summary>
            <param name="rect">The rectangle to center.</param>
            <param name="target">The point to center on.</param>
            <param name="maxWidth">The bounds of the rectangle cannot exceed this width.</param>
            <param name="maxHeight">The bounds of the rectangle cannot exceed this height.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Font">
            <summary>
            Represents a specific font size from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Font.FontSizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Three">
            <summary>
            Two times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.FontSizes.Four">
            <summary>
            Two times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="P:SadConsole.Font.FontImage">
            <summary>
            The texture of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Size">
            <summary>
            The width and height of each glyph.
            </summary>
        </member>
        <member name="P:SadConsole.Font.MaxGlyphIndex">
            <summary>
            The maximum upper inclusive glyph index of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.Font.SolidGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Columns">
            <summary>
            How many columns are in the this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Rows">
            <summary>
            How many rows are in this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SizeMultiple">
            <summary>
            The size originally used to create the font from a <see cref="T:SadConsole.FontMaster"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="P:SadConsole.Global.Fonts"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Master">
            <summary>
            The <see cref="T:SadConsole.FontMaster"/> that created this <see cref="T:SadConsole.Font"/> instance.
            </summary>
        </member>
        <member name="M:SadConsole.Font.ResizeGraphicsDeviceManager(Microsoft.Xna.Framework.GraphicsDeviceManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the graphics device manager based on this font's glyph size.
            </summary>
            <param name="manager">Graphics device manager to resize.</param>
            <param name="width">The width glyphs.</param>
            <param name="height">The height glyphs.</param>
            <param name="additionalWidth">Additional pixel width to add to the resize.</param>
            <param name="additionalHeight">Additional pixel height to add to the resize.</param>
        </member>
        <member name="M:SadConsole.Font.GetRenderRect(System.Int32,System.Int32)">
            <summary>
            Returns a rectangle that is positioned and sized based on the font and the cell position specified.
            </summary>
            <param name="x">The x-axis of the cell position.</param>
            <param name="y">The y-axis of the cell position.</param>
            <returns>A new rectangle.</returns>
        </member>
        <member name="M:SadConsole.Font.GetWorldPosition(System.Int32,System.Int32)">
            <summary>
            Gets the pixel position of a cell position based on the font size.
            </summary>
            <param name="x">The x coordinate of the position.</param>
            <param name="y">The y coordinate of the position.</param>
            <returns>A new pixel point.</returns>
        </member>
        <member name="M:SadConsole.Font.GetWorldPosition(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets the pixel position of a cell position based on the font size.
            </summary>
            <param name="position">The position to convert.</param>
            <returns>A new pixel point.</returns>
        </member>
        <member name="T:SadConsole.FontMaster">
            <summary>
            The font stored by the engine. Used to generate the <see cref="T:SadConsole.Font"/> type used by the engine.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Name">
            <summary>
            The name of this font family.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.FilePath">
            <summary>
            The name of the image file as defined in the .font file.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.LoadedFilePath">
            <summary>
            The path to the file per <see cref="F:SadConsole.Global.SerializerPathHint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Columns">
            <summary>
            The amount of columns the font uses, defaults to 16.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Rows">
            <summary>
            The total rows in the font.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="F:SadConsole.FontMaster.GlyphIndexRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphDefinitions">
            <summary>
            Standard decorators used by your app.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SadConsole font using an existing image.
            </summary>
            <param name="fontImage">The image for the font.</param>
            <param name="glyphWidth">The width of each glyph.</param>
            <param name="glyphHeight">The height of each glyph.</param>
            <param name="totalColumns">Glyph columns in the font texture, defaults to 16.</param>
            <param name="glyphPadding">Pixels between each glyph, defaults to 0.</param>
        </member>
        <member name="M:SadConsole.FontMaster.GetDecorator(System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.FontMaster.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="M:SadConsole.FontMaster.GetGlyphDefinition(System.String)">
            <summary>
            Gets a <see cref="T:SadConsole.FontMaster.GlyphDefinition"/> by name that is defined by the font file.
            </summary>
            <param name="name">The name of the glyph definition.</param>
            <returns>The glyph definition.</returns>
            <remarks>If the glyph definition doesn't exist, return s<see cref="P:SadConsole.FontMaster.GlyphDefinition.Empty"/>.</remarks>
        </member>
        <member name="T:SadConsole.FontMaster.GlyphDefinition">
            <summary>
            Represents a decorator (glyph and mirror) defined by a font.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphDefinition.Empty">
            <summary>
            Gets a glyph definition that has -1 for the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphDefinition.Glyph">
            <summary>
            The glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.FontMaster.GlyphDefinition.Mirror">
            <summary>
            The mirror effect of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.GlyphDefinition.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Creates a new cell decorator instance.
            </summary>
            <param name="glyph"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:SadConsole.FontMaster.GlyphDefinition.CreateCellDecorator(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.CellDecorator"/> from this definition.
            </summary>
            <param name="foreground">The color of the decorator.</param>
            <returns>A new decorator instance.</returns>
        </member>
        <member name="M:SadConsole.FontMaster.GlyphDefinition.CreateCell(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.Cell"/> from this definition.
            </summary>
            <param name="foreground">The foreground color of the cell.</param>
            <param name="background">The background color of the cell.</param>
            <returns>A new cell instance.</returns>
        </member>
        <member name="M:SadConsole.FontMaster.Generate">
            <summary>
            After the font has been loaded, (with the <see cref="P:SadConsole.FontMaster.FilePath"/>, <see cref="P:SadConsole.FontMaster.GlyphHeight"/>, and <see cref="P:SadConsole.FontMaster.GlyphWidth"/> fields filled out) this method will create the actual texture.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.ConfigureRects">
            <summary>
            Builds the <see cref="F:SadConsole.FontMaster.GlyphIndexRects"/> array based on the current font settings.
            </summary>
        </member>
        <member name="M:SadConsole.FontMaster.GetFont(SadConsole.Font.FontSizes)">
            <summary>
            Gets a sized font.
            </summary>
            <param name="multiple">How much to multiple the font size by.</param>
            <returns>A font.</returns>
        </member>
        <member name="T:SadConsole.Global">
            <summary>
            A global state provider used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Fonts">
            <summary>
            Collection of fonts. Used mainly by the deserialization system.
            </summary>
        </member>
        <member name="P:SadConsole.Global.FontDefault">
            <summary>
            The default font for any type that does not provide a font.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GraphicsDevice">
            <summary>
            The MonoGame graphics device.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GraphicsDeviceManager">
            <summary>
            The MonoGame graphics device manager.
            </summary>
        </member>
        <member name="P:SadConsole.Global.SpriteBatch">
            <summary>
            A global reusable sprite batch.
            </summary>
        </member>
        <member name="P:SadConsole.Global.CurrentScreen">
            <summary>
            The active screen processed by the game.
            </summary>
        </member>
        <member name="F:SadConsole.Global.FocusedConsoles">
            <summary>
            The stack of consoles that will receive keyboard and mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Random">
            <summary>
            A global random number generator.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GameTimeElapsedUpdate">
            <summary>
            The elapsed time from the update call. The value is from <see cref="P:SadConsole.Global.GameTimeUpdate"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GameTimeElapsedRender">
            <summary>
            The elapsed time from the render call. The value is from <see cref="P:SadConsole.Global.GameTimeRender"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GameTimeUpdate">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.GameTime"/> object from the update pass.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GameTimeRender">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.GameTime"/> object from the render pass.
            </summary>
        </member>
        <member name="P:SadConsole.Global.MouseState">
            <summary>
            Mouse state which is usually updated in the update pass.
            </summary>
        </member>
        <member name="P:SadConsole.Global.KeyboardState">
            <summary>
            Keyboard state which is usually updated in the update pass.
            </summary>
        </member>
        <member name="F:SadConsole.Global.RenderOutput">
            <summary>
            The render target of SadConsole. This is generally rendered to the screen as the final step of drawing.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderWidth">
            <summary>
            The width of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderHeight">
            <summary>
            The height of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Global.WindowWidth">
            <summary>
            The current game window width.
            </summary>
        </member>
        <member name="P:SadConsole.Global.WindowHeight">
            <summary>
            The current game window height.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderRect">
            <summary>
            Where on the screen the engine will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Global.RenderScale">
            <summary>
            If the <see cref="P:SadConsole.Global.RenderRect"/> is stretched, this is the ratio difference between unstretched.
            </summary>
        </member>
        <member name="F:SadConsole.Global.DrawCalls">
            <summary>
            Draw calls to render to <see cref="F:SadConsole.Global.RenderOutput"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Global.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="P:SadConsole.Global.Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.Global.ResetRendering">
            <summary>
            Resets the <see cref="F:SadConsole.Global.RenderOutput"/> target and determines the appropriate <see cref="P:SadConsole.Global.RenderRect"/> and <see cref="P:SadConsole.Global.RenderScale"/> based on the window or fullscreen state.
            </summary>
        </member>
        <member name="T:SadConsole.Game">
            <summary>
            A MonoGame <see cref="T:SadConsole.Game"/> instance that runs SadConsole. This is used when you don't provide one and call <see cref="!:Engine.Initialize(string, int, int)"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Game.FPSCounterComponent">
            <summary>
            A component to draw how many frames per second the engine is performing at.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnUpdate">
            <summary>
            Called after each frame of update logic has happened.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnDraw">
            <summary>
            Called after a frame has been drawn.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnInitialize">
            <summary>
            Called when the device is created.
            </summary>
        </member>
        <member name="F:SadConsole.Game.OnDestroy">
            <summary>
            Called when the game is ending.
            </summary>
        </member>
        <member name="F:SadConsole.Game.ResizeBusy">
            <summary>
            Indicates the window is going to resize itself.
            </summary>
        </member>
        <member name="E:SadConsole.Game.WindowResized">
            <summary>
            Raised when the window is resized and the render area has been calculated.
            </summary>
        </member>
        <member name="M:SadConsole.Helpers.GetPointFromIndex(System.Int32,System.Int32)">
            <summary>
            Gets the x,y of an index on the surface.
            </summary>
            <param name="index">The index to get.</param>
            <param name="width">Width that includes the index.</param>
            <returns>The x,y as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:SadConsole.Helpers.GetIndexFromPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of a location on the surface by coordinate.
            </summary>
            <param name="x">The x of the location.</param>
            <param name="y">The y of the location.</param>
            <param name="width">Width that includes the point.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="T:SadConsole.IConsoleViewPort">
            <summary>
            A <see cref="T:Microsoft.Xna.Framework.Rectangle"/> for viewing a subset of cells from a <see cref="T:SadConsole.Console"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IConsoleViewPort.ViewPort">
            <summary>
            The current view of the parent object.
            </summary>
        </member>
        <member name="P:SadConsole.IConsoleViewPort.Width">
            <summary>
            The maximum width outside of the view port size.
            </summary>
        </member>
        <member name="P:SadConsole.IConsoleViewPort.Height">
            <summary>
            The maximum height outside of the view port size.
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Key">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PostInitialDelay">
            <summary>
            Tracks if the key was previously held when calculating the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.RemapVirtualKeys(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
             Does any necessary remapping for virtual keys.
            </summary>
            <param name="key"> The key to be remapped. </param>
            <returns> The remapped key. </returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(Microsoft.Xna.Framework.Input.Keys,System.Boolean,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Fills out the fields based on the MonoGame/XNA key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed. For example, if <see cref="F:Microsoft.Xna.Framework.Input.Keys.A"/> is used the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field will be either 'A' if <paramref name="shiftPressed"/> is true or 'a' if false.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(Microsoft.Xna.Framework.Input.Keys,System.Boolean,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.Key"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(Microsoft.Xna.Framework.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(Microsoft.Xna.Framework.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithRightButton">
            <summary>
            Allows the right-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithLeftButton">
            <summary>
            Allows the left-mouse button to drag the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.CanMoveWithKeyboard">
            <summary>
            Allows the keyboard keys to move the view around.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveUpKey">
            <summary>
            Defines the key used to move the viewport up.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveDownKey">
            <summary>
            Defines the key used to move the viewport down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveLeftKey">
            <summary>
            Defines the key used to move the viewport left.
            </summary>
        </member>
        <member name="P:SadConsole.Input.ConsoleViewInputHandler.MoveRightKey">
            <summary>
            Defines the key used to move the viewport right.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keyboard">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. 
            Uses the <see cref="F:SadConsole.Input.Keyboard.RepeatDelay"/> and <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/>, <see cref="P:SadConsole.Input.Keyboard.KeysDown"/>, <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Reads the keyboard state using the <see cref="T:Microsoft.Xna.Framework.GameTime"/> from the update frame.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Process">
            <summary>
            Send the keyboard to the active console.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Mouse">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleButtonDown">
            <summary>
            Indicates the middle mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleClicked">
            <summary>
            Indicates the middle mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleDoubleClicked">
            <summary>
            Inidcates the middle mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftDoubleClicked">
            <summary>
            Inidcates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightDoubleClicked">
            <summary>
            Indicates the right mouse buttion was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.IsOnScreen">
            <summary>
            Indicates that the mouse is currently within the bounds of the rendering area.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the state of the mouse.
            </summary>
            <param name="gameTime">Delta from last update.</param>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clear">
            <summary>
            Clears the buttons, position, wheel information.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Process">
            <summary>
            Builds information about the mouse state based on the <see cref="F:SadConsole.Global.FocusedConsoles"/> or <see cref="P:SadConsole.Global.CurrentScreen"/>. Should be called each frame.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.ClearLastMouseConsole">
            <summary>
            Unlocks the last console the mouse was locked to. Allows another conosle to become locked to the mouse.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.IsMouseOverConsole(SadConsole.Console)">
            <summary>
            Returns true when the mouse is currently over the provided console.
            </summary>
            <param name="console">The console to check.</param>
            <returns>True or false indicating if the mouse is over the console.</returns>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clone">
            <summary>
            Clones this mouse into a new object.
            </summary>
            <returns>A clone.</returns>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Console">
            <summary>
            The console used to create the mouse state.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Mouse">
            <summary>
            The mouse data.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Cell">
            <summary>
            The cell the mouse is over, from <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.CellPosition">
            <summary>
            The position of the <see cref="F:SadConsole.Input.MouseConsoleState.Cell"/>.  
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.ConsoleCellPosition">
            <summary>
            The position of the mouse on the <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>, based on the <see cref="F:SadConsole.Input.MouseConsoleState.WorldCellPosition"/> and the position of the <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.WorldCellPosition">
            <summary>
            A cell-based location of the mouse based on the screen, not the console.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.ConsolePixelPosition">
            <summary>
            The mouse position in pixels on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.IsOnConsole">
            <summary>
            Indicates that the mouse is within the bounds of <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.#ctor(SadConsole.Console,SadConsole.Input.Mouse)">
            <summary>
            Calculates a new <see cref="T:SadConsole.Input.MouseConsoleState"/> based on an <see cref="F:SadConsole.Input.MouseConsoleState.Console"/> and <see cref="F:SadConsole.Input.MouseConsoleState.Mouse"/> state.
            </summary>
            <param name="console">The console to process with the mouse state.</param>
            <param name="mouseData">The current mouse state.</param>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns>A copy of this class instance.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseEventArgs">
            <summary>
            Event arguments for mouse events.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseEventArgs.MouseState">
            <summary>
            The mouse state associated with a console.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.CodeInstruction">
            <summary>
            An instruction with a code callback.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.#ctor(System.Func{SadConsole.Console,System.TimeSpan,System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.SetCallback(System.Func{SadConsole.Console,System.TimeSpan,System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            Runs one or more instructions at the same time. This instruction completes when all added instructions have finished.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.ConcurrentInstructions.Instructions">
            <summary>
            The instructions to run concurrently.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.#ctor(System.Collections.Generic.IEnumerable{SadConsole.Instructions.InstructionBase})">
            <summary>
            Creates a new instruction that runs the provided instructions concurrently.
            </summary>
            <param name="instructions">The instructions</param>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Repeat">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use zero for instant.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Cursor">
            <summary>
            Represents the cursor used in printing. Use this for styling and printing behavior.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.CellSurface,SadConsole.ColoredString)">
            <summary>
            Draws a string on the specified surface.
            </summary>
            <param name="target">The target surface to use.</param>
            <param name="text">The text to print.</param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.ColoredString)">
            <summary>
            Draws a string on the surface passed to <see cref="M:SadConsole.Instructions.DrawString.Update(SadConsole.Console,System.TimeSpan)"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor">
            <summary>
            Draws a string on the surface passed to <see cref="M:SadConsole.Instructions.DrawString.Update(SadConsole.Console,System.TimeSpan)"/>. <see cref="P:SadConsole.Instructions.DrawString.Text"/> must be set manually.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Repeat">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.FadeTextSurfaceTint">
            <summary>
            Animates a color change to <see cref="P:SadConsole.Console.Tint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.FadeAnimationSettings">
            <summary>
            Animation provider.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadConsole.Console,Microsoft.Xna.Framework.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that targets the specified console.
            </summary>
            <param name="console">The <see cref="P:SadConsole.Console.Tint"/> to fade.</param>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(Microsoft.Xna.Framework.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that uses the console passed to <see cref="!:IConsoleComponent.Update(Console, TimeSpan)"/>.
            </summary>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor">
            <summary>
            Creates a new tint fade instruction with default settings that uses the console passed to <see cref="!:IConsoleComponent.Update(Console, TimeSpan)"/>.
            </summary>
            <remarks>
            The default settings are:
            
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors"/>: <see cref="P:Microsoft.Xna.Framework.Color.White"/> to <see cref="P:Microsoft.Xna.Framework.Color.Black"/>
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.FadeAnimationSettings"/>: 1 second
            </remarks>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Reset">
            <summary>
            Starts the instruction over.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Started">
            <summary>
            Raised when the instruction starts.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Finished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Repeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.Finished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Use 0 to not repeat and -1 to repeat forever.
            </summary>
            <remarks>This property counts down each time the instruction finishes. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.Repeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the IsFinished property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnFinished">
            <summary>
            Called when the instruction finishes.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnRepeating">
            <summary>
            Called when the instruction repeats.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnStarted">
            <summary>
            Called when the instruction first runs.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Runs the instruction set. Once all instructions are finished, this set will set the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> property will be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Wait(System.TimeSpan)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.Wait"/> instruction with the specified duration to the end of this set.
            </summary>
            <param name="duration">The time to wait.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Instruct(SadConsole.Instructions.InstructionBase)">
            <summary>
            Adds an instruction to the end of this set.
            </summary>
            <param name="instruction"></param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Func{SadConsole.Console,System.TimeSpan,System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.WaitTrue(System.Func{System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.PredicateInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.InstructConcurrent(SadConsole.Instructions.InstructionBase[])">
            <summary>
            Adds a <see cref="T:SadConsole.Instructions.ConcurrentInstructions"/> to the end of this set.
            </summary>
            <param name="instructions">Instructions to add. Must be two or more instructions.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="T:SadConsole.Instructions.PredicateInstruction">
            <summary>
            Instruction that waits until the code callback returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.PredicateInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.SetCallback(System.Func{System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor(System.TimeSpan)">
            <summary>
            Creates a new wait timer with the specified duration.
            </summary>
            <param name="duration">How long this instruction waits until it signals <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor">
            <summary>
            Creates a new wait timer with a 1-second delay.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.Update(SadConsole.Console,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.Wait.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.LayeredConsole">
            <summary>
            Represents mutliple surfaces grouped together and rendered at the same time.
            </summary>
        </member>
        <member name="M:SadConsole.LayeredConsole.Save(System.String)">
            <summary>
            Saves the <see cref="!:SurfaceBase"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.LayeredConsole.Load(System.String)">
            <summary>
            Loads a <see cref="!:SurfaceBase"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.MathHelper.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps a value around the min and max.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum value before it transforms into the maximum.</param>
            <param name="max">The maximum value before it transforms into the minimum.</param>
            <returns>A new value if it falls outside the min/max range otherwise, the same value.</returns>
        </member>
        <member name="T:SadConsole.Palette">
            <summary>
            A palette of colors.
            </summary>
        </member>
        <member name="P:SadConsole.Palette.Length">
            <summary>
            How many colors the palette has.
            </summary>
        </member>
        <member name="P:SadConsole.Palette.Item(System.Int32)">
            <summary>
            Gets or sets a color in the palette by index.
            </summary>
            <param name="index">Index of the color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadConsole.Palette.#ctor(System.Int32)">
            <summary>
            Creates a new palette with the specified amount of colors.
            </summary>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:SadConsole.Palette.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a new palette of colors from a list of existing colors.
            </summary>
            <param name="colors">The list of colors this palette is made from.</param>
        </member>
        <member name="M:SadConsole.Palette.ShiftLeft">
            <summary>
            Shifts the entire palette once to the left.
            </summary>
        </member>
        <member name="M:SadConsole.Palette.ShiftRight">
            <summary>
            Shifts the entire palette once to the right.
            </summary>
        </member>
        <member name="M:SadConsole.Palette.ShiftLeft(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the left.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadConsole.Palette.ShiftRight(System.Int32,System.Int32)">
            <summary>
            Shifts a range of colors in the palette once to the right.
            </summary>
            <param name="startingIndex">The starting index in the palette.</param>
            <param name="count">The amount of colors to shift from the starting index.</param>
        </member>
        <member name="M:SadConsole.Palette.GetNearest(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the closest color in the palette to the provided color.
            </summary>
            <param name="color">The color to find.</param>
            <returns>The closest matching color.</returns>
        </member>
        <member name="M:SadConsole.Palette.GetNearestIndex(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the index of the closest color in the palette to the provided color.
            </summary>
            <param name="color">The color to find.</param>
            <returns>The palette index of the closest color.</returns>
        </member>
        <member name="M:SadConsole.Palette.GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="M:SadConsole.Palette.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the list of colors in the palette.
            </summary>
            <returns>The colors in the palette.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage">
            <summary>
            A RexPaint image.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Cell">
            <summary>
            A RexPaint layer cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Character">
            <summary>
            The character for the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.IsTransparent">
            <summary>
            Returns true when the current color is considered transparent.
            </summary>
            <returns>True when transparent.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Color">
            <summary>
            A RexPaint color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.R">
            <summary>
            The red channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.G">
            <summary>
            The green channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.B">
            <summary>
            The blue channel of the color.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RexPaint color with the specified RGB channels.
            </summary>
            <param name="r">The red channel of the color.</param>
            <param name="g">The green channel of the color.</param>
            <param name="b">The blue channel of the color.</param>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Color.Transparent">
            <summary>
            Returns the transparent color used by RexPaint: rgb(255, 0, 255).
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Version">
            <summary>
            The version of RexPaint that created this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.LayerCount">
            <summary>
            The total number of layers for this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layers">
            <summary>
            A read-only collection of layers.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RexPaint image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create">
            <summary>
            Creates a new layer for the image adding it to the end of the layer stack.
            </summary>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create(System.Int32)">
            <summary>
            Creates a new layer for the image and inserts it at the specified position (0-based).
            </summary>
            <param name="index">The position to create the new layer at.</param>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer,System.Int32)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image and inserts it at the specified position (0-based).
            </summary>
            <param name="layer">The layer to add.</param>
            <param name="index">The position to add the layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Remove(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.ToLayeredConsole">
            <summary>
            Converts this REXPaint image to a <see cref="T:SadConsole.LayeredConsole"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Load(System.IO.Stream)">
            <summary>
            Loads a .xp RexPaint image from a GZip compressed stream.
            </summary>
            <param name="stream">The GZip stream to load.</param>
            <returns>The RexPaint image.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Layer">
            <summary>
            A layer of a RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Width">
            <summary>
            The width of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Height">
            <summary>
            The height of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Cells">
            <summary>
            Represents all cells of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates.
            </summary>
            <param name="x">The x (0-based) position of the cell.</param>
            <param name="y">The y (0-based) position of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new layer with the specified width and height.
            </summary>
            <param name="width">The width of the layer.</param>
            <param name="height">The height of the layer.</param>
        </member>
        <member name="T:SadConsole.Readers.TextureToSurfaceReader">
            <summary>
            Reads a texture to a cached surface. Used for animation.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TextureToSurfaceReader.UseBlockMode">
            <summary>
            Renders the cells as blocks instead of characters.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="pixelWidth">Width the source texture.</param>
            <param name="pixelHeight">Height of the source texture.</param>
            <param name="font">Font used for rendering.</param>
        </member>
        <member name="M:SadConsole.Readers.TextureToSurfaceReader.GetSurface(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Returns a surface with the specified image rendered to it as characters.
            </summary>
            <param name="image">The image to render.</param>
            <returns>The surface.</returns>
        </member>
        <member name="T:SadConsole.Renderers.Console">
            <summary>
            Caches a text surface by rendering to a texture. That texture is then rendered at draw time. Reduces draw calls for a non-changing console.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.Console.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text is drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.Console.BeforeRenderTintCallback">
            <summary>
            A method called when all text characters have been drawn but before any tinting has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.Console.AfterRenderCallback">
            <summary>
            A method called when all text has been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.Console.Render(SadConsole.Console,System.Boolean)">
            <summary>
            When <see cref="P:SadConsole.CellSurface.IsDirty"/> is <see langword="true"/>, draws the surface to the <see cref="P:SadConsole.Console.LastRenderResult"/> and tints it.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="force">When <see langword="true"/>, draws the surface even if <see cref="P:SadConsole.CellSurface.IsDirty"/> is <see langword="false"/>.</param>
        </member>
        <member name="T:SadConsole.Renderers.ControlsConsole">
            <summary>
            Draws a text surface to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ControlsConsole.Controls">
            <summary>
            Controls to render.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.ControlsConsole.Render(SadConsole.Console,System.Boolean)">
            <summary>
            Renders a surface to the screen.
            </summary>
            <param name="surface">The surface to render.</param>
            <param name="force">When <see langword="true"/> draws the surface even if <see cref="P:SadConsole.CellSurface.IsDirty"/> is <see langword="false"/>.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderer">
            <summary>
            Represents the ability to render cell data to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.BeforeRenderCallback">
            <summary>
            A method called when the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> has been created and transformed, but before any text characters are drawn.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.BeforeRenderTintCallback">
            <summary>
            A method called when all text characters have been drawn but before any tinting has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.AfterRenderCallback">
            <summary>
            A method called when all text characters have been drawn and any tinting has been applied.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Render(SadConsole.Console,System.Boolean)">
            <summary>
            Renders the cell data to the screen.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.LayeredConsole">
            <summary>
            Draws a text surface to the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.LayeredConsole.Layers">
            <summary>
            Controls to render.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.LayeredConsole.Render(SadConsole.Console,System.Boolean)">
            <summary>
            Renders a surface to the screen.
            </summary>
            <param name="surface">The surface to render.</param>
            <param name="force">When <see langword="true"/> draws the surface even if <see cref="P:SadConsole.CellSurface.IsDirty"/> is <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.Renderers.LayeredConsole.RenderLayer(SadConsole.CellSurfaceLayer,SadConsole.Console,System.Boolean)">
            <summary>
            Renders a layer on top of a console.
            </summary>
            <param name="layer">The layer to render.</param>
            <param name="drawingHost">The console that will be drawn on.</param>
            <param name="draw">If <see langword="false"/>, skips rendering.</param>
        </member>
        <member name="T:SadConsole.ScrollingConsole">
            <summary>
            A <see cref="T:SadConsole.Console"/> that implements <see cref="T:SadConsole.IConsoleViewPort"/> to provide a scrolling capability.
            </summary>
        </member>
        <member name="F:SadConsole.ScrollingConsole.ViewPortRectangle">
            <summary>
            Sets the viewport without triggering <see cref="M:SadConsole.ScrollingConsole.SetRenderCells"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScrollingConsole.ViewPort">
            <summary>
            Sets the area of the text surface that should be rendered.
            </summary>
        </member>
        <member name="M:SadConsole.ScrollingConsole.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new scrolling console with the specified width and height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new scrolling console with the specified width, height, and font.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new scrolling console with the specified width, height, and a view port.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="viewPort">Initial value for the viewport if this console will scroll.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new scrolling console with the specified width, height, font, and a view port.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="viewPort">Initial value for the viewport if this console will scroll.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.#ctor(System.Int32,System.Int32,SadConsole.Font,Microsoft.Xna.Framework.Rectangle,SadConsole.Cell[])">
            <summary>
            Creates a new scrolling console with the specified width, height, and initial set of cell data.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="font">The font used with rendering.</param>
            <param name="viewPort">Initial value for the viewport if this console will scroll.</param>
            <param name="initialCells">Seeds the cells with existing values. Array size must match <paramref name="width"/> * <paramref name="height"/>.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.SetRenderCells">
            <summary>
            Calculates which cells to draw based on <see cref="P:SadConsole.ScrollingConsole.ViewPort"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScrollingConsole.OnCellsReset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ScrollingConsole.Resize(System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
            <param name="clear">When true, resets every cell to the <see cref="P:SadConsole.CellSurface.DefaultForeground"/>, <see cref="P:SadConsole.CellSurface.DefaultBackground"/> and glyph 0.</param>
            <param name="viewPort">The view port to apply after resizing.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.OnViewPortChanged">
            <summary>
            Called when the <see cref="P:SadConsole.ScrollingConsole.ViewPort"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScrollingConsole.OnBeforeRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called when the renderer renders the text view.
            </summary>
            <param name="batch">The batch used in rendering.</param>
        </member>
        <member name="M:SadConsole.ScrollingConsole.FromSurface(SadConsole.Console,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new console from an existing surface.
            </summary>
            <param name="surface">The source console to convert to a scrolling console.</param>
            <param name="viewPort">The view port to apply to the new scrolling console.</param>
            <returns>A new scrolling console.</returns>
        </member>
        <member name="M:SadConsole.ScrollingConsole.FromSurface(SadConsole.CellSurface,SadConsole.Font)">
            <summary>
            Creates a new console from an existing surface.
            </summary>
            <param name="surface">The source console to convert to a scrolling console.</param>
            <param name="font">The font to associate with the new console.</param>
            <returns>A new scrolling console.</returns>
        </member>
        <member name="T:SadConsole.SerializedTypes.EntitySerialized">
            <summary>
            Serialized instance of a <see cref="T:SadConsole.Entities.Entity"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes the <paramref name="instance"/> instance to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="compress">When true, uses GZIP compression on the json string saved to the <paramref name="file"/></param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Boolean)">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="isCompressed">When true, indicates that the json <paramref name="file"/> should be decompressed with GZIP compression.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="T:SadConsole.Settings">
            <summary>
            Various settings for SadConsole.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultConsoleUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.Console.UseKeyboard"/> when the console is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ClearColor">
            <summary>
            The color to automatically clear the device with.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ResizeMode">
            <summary>
            The type of resizing options for the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.AllowWindowResize">
            <summary>
            Allow the user to resize the window. Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.UnlimitedFPS">
            <summary>
            Unlimited FPS when rendering (normally limited to 60fps). Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoDraw">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Draw(Microsoft.Xna.Framework.GameTime)"/> will run.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoFinalDraw">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Draw(Microsoft.Xna.Framework.GameTime)"/> will render to the screen at the end.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoUpdate">
            <summary>
            When true, indicates that <see cref="M:SadConsole.Game.SadConsoleGameComponent.Update(Microsoft.Xna.Framework.GameTime)"/> will run.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.GraphicsProfile">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile"/> value to use.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseHardwareFullScreen">
            <summary>
            Tells MonoGame to use a full screen resolution change instead of soft (quick) full screen. Must be set before the game is created.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowMinimumSize">
            <summary>
            When not set to (0,0) this property specifies the minimum size of the game window in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.SerializationIsCompressed">
            <summary>
            When set to true, all loading and saving performed by SadConsole uses GZIP. <see cref="M:SadConsole.Global.LoadFont(System.String)"/> does not use this setting and always runs uncompressed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseDefaultExtendedFont">
            <summary>
            When set to true, and a font is not specified with the <see cref="!:Game.Create(string, int, int, Action&lt;Game&gt;)"/> overload, the IBM 8x16 extended SadConsole font will be used.
            </summary>
        </member>
        <member name="M:SadConsole.Settings.ToggleFullScreen">
            <summary>
            Toggles between windowed and fullscreen rendering for SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Settings.ResizeWindow(System.Int32,System.Int32)">
            <summary>
            Resizes the game window.
            </summary>
            <param name="width">The width of the window in pixels.</param>
            <param name="height">The height of the window in pixels.</param>
        </member>
        <member name="T:SadConsole.Settings.Input">
            <summary>
            Settings related to input.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.ProcessMouseOffscreen">
            <summary>
            Not currently used
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.DoMouse">
            <summary>
            When true, the <see cref="T:SadConsole.Game"/> object updates the mouse state every update frame.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.DoKeyboard">
            <summary>
            When true, the <see cref="T:SadConsole.Game"/> object updates the keyboard state every update frame.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.WindowResizeOptions">
            <summary>
            Resize modes for the final SadConsole render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Stretch">
            <summary>
            Stretches the <see cref="F:SadConsole.Global.RenderOutput"/> to fit the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Center">
            <summary>
            Centers <see cref="F:SadConsole.Global.RenderOutput"/> in the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Scale">
            <summary>
            Scales <see cref="F:SadConsole.Global.RenderOutput"/> to fit the window as best as possible while maintaining a good picture.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Fit">
            <summary>
            Fits <see cref="F:SadConsole.Global.RenderOutput"/> to the window using padding to maintain aspect ratio.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.None">
            <summary>
            <see cref="F:SadConsole.Global.RenderOutput"/> always matches the window.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Mirror">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Mirror"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredGlyph@,SadConsole.ColoredGlyph[],System.Int32,SadConsole.CellSurface,System.Int32@,System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this flyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandMirror">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection 
            based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Themes.ButtonTheme">
            <summary>
            The theme of the button control
            </summary>
        </member>
        <member name="P:SadConsole.Themes.ButtonTheme.ShowEnds">
            <summary>
            When true, renders the <see cref="P:SadConsole.Themes.ButtonTheme.EndCharacterLeft"/> 
            and <see cref="P:SadConsole.Themes.ButtonTheme.EndCharacterRight"/> on the button.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.ButtonTheme.EndCharacterLeft">
            <summary>
            The character on the left side of the button. Defaults to '&lt;'.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.ButtonTheme.EndCharacterRight">
            <summary>
            The character on the right side of the button. Defaults to '>'.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ButtonTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ButtonTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ButtonTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.Button3dTheme">
            <summary>
            A 3D shadow theme of the button control
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Button3dTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.Button3dTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.Button3dTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.Button3dTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.ButtonLinesTheme">
            <summary>
            A 3D theme of the button control using thin lines. Supports the SadConsole extended character set.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ButtonLinesTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ButtonLinesTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ButtonLinesTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.CheckBoxTheme">
            <summary>
            The theme of a checkbox control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.CheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.UncheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.LeftBracket">
            <summary>
            The icon displayed for the brack left of the check icon.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.CheckBoxTheme.RightBracket">
            <summary>
            The icon displayed for the brack right of the check icon.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.CheckBoxTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.CheckBox"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.CheckBoxTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.CheckBoxTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.CheckBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.Colors">
            <summary>
            Default colors used by control themes.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.Colors.ModalBackground">
            <summary>
            The color used to darken the background when <see cref="o:Window.Show"/> is called and <see cref="P:SadConsole.Window.IsModal"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Colors.RebuildAppearances">
            <summary>
            Sets all Appearance* properties based on the existing colors and settings.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Colors.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A new Colors object.</returns>
        </member>
        <member name="T:SadConsole.Themes.ControlsConsoleTheme">
            <summary>
            A theme for a Window object.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ControlsConsoleTheme.FillStyle">
            <summary>
            The style of of the console surface.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.#ctor(SadConsole.Themes.Colors)">
            <summary>
            Creates a new controls console theme with the specified colors.
            </summary>
            <param name="themeColors">The colors used with this theme.</param>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.#ctor">
            <summary>
            Creates a new theme without specifying the colors.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.Draw(SadConsole.ControlsConsole,SadConsole.CellSurface)">
            <summary>
            Draws the theme to the console.
            </summary>
            <param name="console">Console associated with the theme.</param>
            <param name="hostSurface">Surface used for drawing.</param>
        </member>
        <member name="M:SadConsole.Themes.ControlsConsoleTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <summary>
            Updates the theme with a color scheme.
            </summary>
            <param name="themeColors">The colors to update with.</param>
        </member>
        <member name="T:SadConsole.Themes.DrawingSurfaceTheme">
            <summary>
            A basic theme for a drawing surface that simply fills the surface based on the state.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.DrawingSurfaceTheme.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="F:SadConsole.Themes.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.DrawingSurfaceTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.DrawingSurfaceTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.DrawingSurfaceTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.Library">
            <summary>
            The library of themes. Holds the themes of all controls.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.Default">
            <summary>
            If a control does not specify its own theme, the theme from this property will be used.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.Colors">
            <summary>
            Colors for the theme library.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.ButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.Button"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.SelectionButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.SelectionButton"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.ScrollBarTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ScrollBar"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.RadioButtonTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.RadioButton"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.ListBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ListBox"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.CheckBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.CheckBox"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.TextBoxTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.TextBox"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.ProgressBarTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Controls.ProgressBar"/> control.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.DrawingSurfaceTheme">
            <summary>
            Theme for <see cref="T:SadConsole.Controls.DrawingSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.ControlsConsoleTheme">
            <summary>
            Theme for <see cref="T:SadConsole.ControlsConsole"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.Library.WindowTheme">
            <summary>
            Theme for the <see cref="T:SadConsole.Window"/> control.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Library.#ctor">
            <summary>
            Creates a new instance of the theme library with default themes.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Library.#ctor(System.Boolean)">
            <summary>
            Create the instance for the singleton.
            </summary>
            <param name="_">Not used.</param>
        </member>
        <member name="M:SadConsole.Themes.Library.GetControlTheme(SadConsole.Controls.ControlBase)">
            <summary>
            Gets a new control theme based on the control passed.
            </summary>
            <param name="control">The control instance</param>
            <returns>A theme that is associated with the control.</returns>
        </member>
        <member name="M:SadConsole.Themes.Library.OnColorsChanged">
            <summary>
            Refreshes the theme colors of every control. Called when the <see cref="P:SadConsole.Themes.Library.Colors"/> property has changed.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.Library.Clone">
            <summary>
            Clonse this library.
            </summary>
            <returns>A new instance of a library.</returns>
        </member>
        <member name="T:SadConsole.Themes.ListBoxTheme">
            <summary>
            The theme for a ListBox control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.BorderTheme">
            <summary>
            The drawing theme for the boarder when <see cref="F:SadConsole.Themes.ListBoxTheme.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.BorderLineStyle">
            <summary>
            The line style for the border when <see cref="F:SadConsole.Themes.ListBoxTheme.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.DrawBorder">
            <summary>
            If false the border will not be drawn.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ListBoxTheme.ScrollBarTheme">
            <summary>
            The appearance of the scrollbar used by the listbox control.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.#ctor(SadConsole.Themes.ScrollBarTheme)">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.ListBox"/>.
            </summary>
            <param name="scrollBarTheme">The theme to use to draw the scroll bar.</param>
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ListBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ListBoxItemTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.ProgressBarTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ProgressBarTheme.Background">
            <summary>
            The theme of the unprogressed part of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ProgressBarTheme.Foreground">
            <summary>
            The theme of the progressed part of the bar.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.ProgressBar"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ProgressBarTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.RadioButtonTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.CheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.UncheckedIcon">
            <summary>
            The icon displayed when the radio button is checked.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.LeftBracket">
            <summary>
            The icon displayed for the brack left of the check icon.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.RadioButtonTheme.RightBracket">
            <summary>
            The icon displayed for the brack right of the check icon.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.RadioButton"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.RadioButtonTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.ScrollBarTheme">
            <summary>
            The theme of the slider control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.StartButtonVerticalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.EndButtonVerticalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.StartButtonHorizontalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.EndButtonHorizontalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.BarGlyph">
            <summary>
            The theme part for the scroll bar bar where the slider is not located.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ScrollBarTheme.SliderGlyph">
            <summary>
            The theme part for the scroll bar icon.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.ScrollBar"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.ScrollBarTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.TextBoxTheme">
            <summary>
            A theme for the input box control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.TextBoxTheme.CaretEffect">
            <summary>
            The style to use for the carrot.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.TextBoxTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.Controls.TextBox"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.TextBoxTheme.Attached(SadConsole.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.TextBoxTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.TextBoxTheme.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.TextBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Themes.ThemeStates">
            <summary>
            Has the basic appearances of each control state.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.Normal">
            <summary>
            The normal appearance of the control.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.Disabled">
            <summary>
            The appearance of the control when it is disabled.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.Focused">
            <summary>
            The appearance of the control when it is focused.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.Selected">
            <summary>
            The appearence of the control when it is in a selected state.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.MouseOver">
            <summary>
            The appearance of the control when the mouse is over it.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.ThemeStates.MouseDown">
            <summary>
            THe appearance of the control when a mouse button is held down.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.#ctor(SadConsole.Themes.Colors)">
            <summary>
            Creates a new instance of the theme states object.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.SetForeground(Microsoft.Xna.Framework.Color)">
            <summary>
            Sets the same foreground color to all theme states.
            </summary>
            <param name="color">The foreground color.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.SetBackground(Microsoft.Xna.Framework.Color)">
            <summary>
            Sets the same background color to all theme states.
            </summary>
            <param name="color">The background color.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.SetGlyph(System.Int32)">
            <summary>
            Sets the same glyph to all theme states.
            </summary>
            <param name="glyph">The glyph.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.SetMirror(Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Sets the same mirror setting to all theme states.
            </summary>
            <param name="mirror">The mirror setting.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.GetStateAppearance(SadConsole.Controls.ControlStates)">
            <summary>
            Gets an apperance defined by this theme from the <paramref name="state" /> parameter.
            </summary>
            <param name="state">The state to check.</param>
            <returns>A cell appearance.</returns>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.Clone">
            <summary>
            Performs a deep copy of this theme.
            </summary>
            <returns>A new instance of the theme.</returns>
        </member>
        <member name="M:SadConsole.Themes.ThemeStates.RefreshTheme(SadConsole.Themes.Colors)">
            <summary>
            Reloads the theme values based on the colors provided.
            </summary>
            <param name="themeColors">The colors to create the theme with.</param>
        </member>
        <member name="T:SadConsole.Themes.ThemeBase">
            <summary> 
            The base class for a theme.
            </summary>
        </member>
        <member name="P:SadConsole.Themes.ThemeBase.Colors">
            <summary>
            The colors to set for the theme. If <see langword="null"/>, then colors are pulled from the parent control or <see cref="P:SadConsole.Themes.Library.Default"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.ThemeBase.UpdateAndDraw(SadConsole.Controls.ControlBase,System.TimeSpan)">
            <summary>
            Draws the control state to the control.
            </summary>
            <param name="control">The control to draw.</param>
            <param name="time">The time since the last update frame call.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeBase.Attached(SadConsole.Controls.ControlBase)">
            <summary>
            Called when the theme is attached to a control.
            </summary>
            <param name="control">The control that will use this theme instance.</param>
        </member>
        <member name="M:SadConsole.Themes.ThemeBase.Clone">
            <summary>
            Creates a new theme instance based on the current instance.
            </summary>
            <returns>A new theme instance.</returns>
        </member>
        <member name="T:SadConsole.Themes.WindowTheme">
            <summary>
            A theme for a Window object.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.TitleStyle">
            <summary>
            The style of the title.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.TitleAreaY">
            <summary>
            The Y coordinate of the title drawing area. This can be set to any value > 0 and &lt; the height.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.TitleAreaX">
            <summary>
            The X coordinate of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.TitleAreaLength">
            <summary>
            The width of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.BorderStyle">
            <summary>
            The style of the border
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.BorderLineStyle">
            <summary>
            The line sytle for the border.
            </summary>
        </member>
        <member name="F:SadConsole.Themes.WindowTheme.ModalTint">
            <summary>
            The color to tint the background when the window is shown as modal.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.#ctor(SadConsole.Themes.Colors)">
            <summary>
            Creates a new controls console theme with the specified colors.
            </summary>
            <param name="themeColors">The colors used with this theme.</param>
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.#ctor">
            <summary>
            Creates a new theme without specifying the colors.
            </summary>
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.Clone">
            <summary>
            Returns a clone of this object. <see cref="F:SadConsole.Themes.WindowTheme.BorderLineStyle"/> is referenced.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.Draw(SadConsole.ControlsConsole,SadConsole.CellSurface)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Themes.WindowTheme.RefreshTheme(SadConsole.Themes.Colors)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Timer">
            <summary>
            A simple timer with callback.
            </summary>
        </member>
        <member name="E:SadConsole.Timer.TimerElapsed">
            <summary>
            Called when the timer elapses.
            </summary>
        </member>
        <member name="E:SadConsole.Timer.TimerRestart">
            <summary>
            Called when the timer restarts.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.Repeat">
            <summary>
            If true, the timer will restart when the time has elapsed.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.TimerAmount">
            <summary>
            How many milliseconds to cause the timer to trigger.
            </summary>
        </member>
        <member name="P:SadConsole.Timer.IsPaused">
            <summary>
            When true, the timer does not count time.
            </summary>
        </member>
        <member name="M:SadConsole.Timer.#ctor(System.TimeSpan)">
            <summary>
            Creates a new timer.
            </summary>
            <param name="triggerTime">Duration of the timer.</param>
        </member>
        <member name="M:SadConsole.Timer.Update(SadConsole.Console,System.TimeSpan)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="console">The parent object.</param>
            <param name="delta">The time since the last frame update.</param>
        </member>
        <member name="M:SadConsole.Timer.Restart">
            <summary>
            Restarts the timer; sets <see cref="P:SadConsole.Timer.IsPaused"/> to false.
            </summary>
        </member>
        <member name="T:SadConsole.Window">
            <summary>
            Represents a windowed controls console.
            </summary>
        </member>
        <member name="E:SadConsole.Window.Closed">
            <summary>
            Raised when the window is closed.
            </summary>
        </member>
        <member name="F:SadConsole.Window.PreviousMouseInfo">
            <summary>
            The mouse state of the previous update frame.
            </summary>
        </member>
        <member name="F:SadConsole.Window.CellAtDragPosition">
            <summary>
            The position of the cell that the window drag started at.
            </summary>
        </member>
        <member name="F:SadConsole.Window.PreviousMouseExclusiveDrag">
            <summary>
            Temporary value to hold the state of <see cref="P:SadConsole.Console.IsExclusiveMouse"/> prior to dragging.
            </summary>
        </member>
        <member name="F:SadConsole.Window.AddedToParent">
            <summary>
            When <see langword="true"/>, indicates that the window has been added to a parent; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Window.IsDragging">
            <summary>
            When <see langword="true"/>, indicates that the window is being dragged; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Window.TitleAlignment">
            <summary>
            Gets or sets the alignment of the window title.
            </summary>
        </member>
        <member name="P:SadConsole.Window.IsModal">
            <summary>
            Gets the whether or not the console is being shown as modal. 
            </summary>
        </member>
        <member name="P:SadConsole.Window.CanDrag">
            <summary>
            Gets or sets whether or not this window can be moved with the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Window.CloseOnEscKey">
            <summary>
            Gets or sets whether or not this window can be closed when the escape key is pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Window.DialogResult">
            <summary>
            Gets or set the dialog result status of the window.
            </summary>
        </member>
        <member name="P:SadConsole.Window.IsModalDefault">
            <summary>
            Indicates that when this window is shown by the <see cref="M:SadConsole.Window.Show"/> method or by setting the <see cref="P:SadConsole.Console.IsVisible"/> property to true, the window will be shown as modal.
            </summary>
        </member>
        <member name="P:SadConsole.Window.Title">
            <summary>
            Gets or sets the title displayed on the window.
            </summary>
        </member>
        <member name="P:SadConsole.Window.Theme">
            <summary>
            Gets or sets the theme of the window.
            </summary>
        </member>
        <member name="M:SadConsole.Window.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new window with the specified with and height in cells.
            </summary>
            <param name="width">The width of the window in cells.</param>
            <param name="height">The height of the window in cells.</param>
        </member>
        <member name="M:SadConsole.Window.#ctor(System.Int32,System.Int32,SadConsole.Font)">
            <summary>
            Creates a new window with the specified with and height in cells.
            </summary>
            <param name="width">The width of the window in cells.</param>
            <param name="height">The height of the window in cells.</param>
            <param name="font">THe font to use with the window.</param>
        </member>
        <member name="M:SadConsole.Window.Draw(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Window.Invalidate">
            <summary>
            Causes the window to be redrawn with the selected <see cref="P:SadConsole.Window.Theme"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Window.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Window.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard looking for the ESC key press to close the console, if required. Otherwise the base ControlsConsole will process the keyboard.
            </summary>
            <param name="info">Keyboard state.</param>
        </member>
        <member name="M:SadConsole.Window.OnVisibleChanged">
            <summary>
            Depending on if the window is visible, calls <see cref="M:SadConsole.Window.Show(System.Boolean)"/> or <see cref="M:SadConsole.Window.Hide"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Show">
            <summary>
            Displays this window using the modal value of the <see cref="P:SadConsole.Window.IsModalDefault"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Show(System.Boolean)">
            <summary>
            Displays this window.
            </summary>
            <param name="modal">When true, the window will be displayed as modal; otherwise false.</param>
        </member>
        <member name="M:SadConsole.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:SadConsole.Window.Center">
            <summary>
            Centers the window within the bounds of <see cref="P:SadConsole.Global.RenderWidth"/> and <see cref="P:SadConsole.Global.RenderHeight"/>
            </summary>
        </member>
        <member name="M:SadConsole.Window.Prompt(System.String,System.String,System.String,System.Action{System.Boolean},SadConsole.Themes.Library)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display.</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="library">The library to theme the message box. If <see langword="null"/>, then the theme will be set to <see cref="P:SadConsole.Themes.Library.Default"/>.</param>
        </member>
        <member name="M:SadConsole.Window.Prompt(SadConsole.ColoredString,System.String,System.String,System.Action{System.Boolean},SadConsole.Themes.Library)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display. (background color is ignored)</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="library">The library to theme the message box. If <see langword="null"/>, then the theme will be set to <see cref="P:SadConsole.Themes.Library.Default"/>.</param>
        </member>
        <member name="M:SadConsole.Window.Message(System.String,System.String,System.Action,SadConsole.Themes.Library)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message.</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="library">The library to theme the message box. If <see langword="null"/>, then the theme will be set to <see cref="P:SadConsole.Themes.Library.Default"/>.</param>
        </member>
        <member name="M:SadConsole.Window.Message(SadConsole.ColoredString,System.String,System.Action,SadConsole.Themes.Library)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message. (background color is ignored)</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="library">The library to theme the message box. If <see langword="null"/>, then the theme will be set to <see cref="P:SadConsole.Themes.Library.Default"/>.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorAnsi">
            <summary>
            Classic 16 ansi color values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Black">
            <summary>
            The black ansi color (0, 0, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Red">
            <summary>
            The Red ansi color (170, 0, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Green">
            <summary>
            The Green ansi color 0, 170, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Yellow">
            <summary>
            The Yellow ansi color (170, 85, 0).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Blue">
            <summary>
            The Blue ansi color (0, 0, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Magenta">
            <summary>
            The Magenta ansi color (170, 0, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.Cyan">
            <summary>
            The Cyan ansi color (0, 170, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.White">
            <summary>
            The White ansi color (170, 170, 170).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.BlackBright">
            <summary>
            The BlackBright ansi color (85, 85, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.RedBright">
            <summary>
            The RedBright ansi color (255, 85, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.GreenBright">
            <summary>
            The GreenBright ansi color (85, 255, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.YellowBright">
            <summary>
            The YellowBright ansi color (255, 255, 85).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.BlueBright">
            <summary>
            The BlueBright ansi color (85, 85, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.MagentaBright">
            <summary>
            The MagentaBright ansi color (255, 85, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.CyanBright">
            <summary>
            The CyanBright ansi color (85, 255, 255).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorAnsi.WhiteBright">
            <summary>
            The WhiteBright ansi color (255, 255, 255).
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorExtensions">
            <summary>
            Various extension methods to <see cref="T:Microsoft.Xna.Framework.Color"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorExtensions.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ToInteger(Microsoft.Xna.Framework.Color)">
            <summary>
            Wrapper for <see cref="P:Microsoft.Xna.Framework.Color.PackedValue"/>.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.LerpSteps(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="color"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="color">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.SetHSL(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color values based on HSL instead of RGB.
            </summary>
            <param name="color">The color to change.</param>
            <param name="h">The hue amount.</param>
            <param name="s">The saturation amount.</param>
            <param name="l">The luminance amount.</param>
            <remarks>Taken from http://www.easyrgb.com/index.php?X=MATH&amp;H=19#text19 </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetRandomColor(Microsoft.Xna.Framework.Color,System.Random)">
            <summary>
            Gets a random color.
            </summary>
            <param name="color">The color object to start with. Will be overridden.</param>
            <param name="random">A random object to get numbers from.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.RedOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the red channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GreenOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the green channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.BlueOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the blue channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.AlphaOnly(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new Color using only the Alpha value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the alpha channel set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearRed(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the red channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearGreen(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the green channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearBlue(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the blue channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ClearAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the alpha channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel cleared.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillRed(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the red channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillGreen(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the green channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillBlue(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the blue channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FillAlpha(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a new color with the alpha channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel fully set.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetLuma(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <param name="color">The color to calculate the luma from.</param>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetBrightness(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the brightness of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The brightness value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetSaturation(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the saturation of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The saturation value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.GetHue(Microsoft.Xna.Framework.Color)">
            <summary>
            Gets the hue of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The hue value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.ToParser(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts a color to the format used by <see cref="!:SadConsole.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="P:Microsoft.Xna.Framework.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorExtensions.FromParser(Microsoft.Xna.Framework.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="!:SadConsole.ParseCommandRecolor"/>.
            </summary>
            <param name="color"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.ColorGradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.#ctor(Microsoft.Xna.Framework.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.ToColoredString(System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.ToColorArray(System.Int32)">
            <summary>
            Gets an array of colors based from the gradient.
            </summary>
            <param name="count">The amount of colors to produce.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.ColorGradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.ColorGradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.ColorGradientStop.Stop">
            <summary>
            The color stop in the gradiant this applies to.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ConsoleLocationToPixel(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ConsoleLocationToPixel(Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="font">The font to use in calculating the position.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.PixelLocationToConsole(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.PixelLocationToConsole(Microsoft.Xna.Framework.Point,SadConsole.Font)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="font">The font to use in calculating the position.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ToIndex(Microsoft.Xna.Framework.Point,System.Int32)">
            <summary>
            Translates an x,y position to an array index.
            </summary>
            <param name="point">The position.</param>
            <param name="rowWidth">How many columns in a row.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ToPoint(System.Int32,System.Int32)">
            <summary>
            Translates an array index to a Point.
            </summary>
            <param name="index">The index in the array.</param>
            <param name="rowWidth">How many columns in a row.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.TranslateFont(Microsoft.Xna.Framework.Point,SadConsole.Font,SadConsole.Font)">
            <summary>
            Gets the cell coordinates of the <paramref name="targetFont"/> based on a cell in the <paramref name="sourceFont"/>.
            </summary>
            <param name="point">The position of the cell in the <paramref name="sourceFont"/>.</param>
            <param name="sourceFont">The source font translating from.</param>
            <param name="targetFont">The target font translating to.</param>
            <returns>The position of the cell in the <paramref name="targetFont"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.PointExtensions.ToPositionMatrix(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Boolean)">
            <summary>
            Creates a position matrix (in pixels) based on the position of a cell.
            </summary>
            <param name="position">The cell position.</param>
            <param name="cellSize">The size of the cell in pixels.</param>
            <param name="absolutePositioning">When true, indicates that the <paramref name="position"/> indicates pixels, not cell coordinates.</param>
            <returns>A matrix for rendering.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.RectangleExtensions2.ToPixels(Microsoft.Xna.Framework.Rectangle,SadConsole.Font)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="font">The font used for translation.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.RectangleExtensions2.ToPixels(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.RectangleExtensions2.ToConsole(Microsoft.Xna.Framework.Rectangle,SadConsole.Font)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="font">The font used for translation.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.RectangleExtensions2.ToConsole(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateColored(System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Graphics.SpriteEffects})">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="F:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="F:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="mirror">The mirror setting. If null, <see cref="F:SadConsole.ColoredString.IgnoreMirror"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.Masked(System.String,System.String)">
            <summary>
            Returns a string of mask characters the same length as the input string.
            </summary>
            <param name="toMask">The string to mask.</param>
            <param name="mask">The mask to use.</param>
            <returns>A string of masks.</returns>
        </member>
    </members>
</doc>
